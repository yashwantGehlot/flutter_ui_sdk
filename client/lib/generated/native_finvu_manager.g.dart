// Autogenerated from Pigeon (v14.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

class NativeFinvuConfig {
  NativeFinvuConfig({
    required this.finvuEndpoint,
    this.certificatePins,
  });

  String finvuEndpoint;

  List<String?>? certificatePins;

  Object encode() {
    return <Object?>[
      finvuEndpoint,
      certificatePins,
    ];
  }

  static NativeFinvuConfig decode(Object result) {
    result as List<Object?>;
    return NativeFinvuConfig(
      finvuEndpoint: result[0]! as String,
      certificatePins: (result[1] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class NativeHandleInfo {
  NativeHandleInfo({
    required this.userId,
  });

  String userId;

  Object encode() {
    return <Object?>[
      userId,
    ];
  }

  static NativeHandleInfo decode(Object result) {
    result as List<Object?>;
    return NativeHandleInfo(
      userId: result[0]! as String,
    );
  }
}

class NativeFIPDetails {
  NativeFIPDetails({
    required this.fipId,
    required this.typeIdentifiers,
  });

  String fipId;

  List<NativeFIPFiTypeIdentifier?> typeIdentifiers;

  Object encode() {
    return <Object?>[
      fipId,
      typeIdentifiers,
    ];
  }

  static NativeFIPDetails decode(Object result) {
    result as List<Object?>;
    return NativeFIPDetails(
      fipId: result[0]! as String,
      typeIdentifiers: (result[1] as List<Object?>?)!.cast<NativeFIPFiTypeIdentifier?>(),
    );
  }
}

class NativeFIPFiTypeIdentifier {
  NativeFIPFiTypeIdentifier({
    required this.fiType,
    required this.identifiers,
  });

  String fiType;

  List<NativeTypeIdentifier?> identifiers;

  Object encode() {
    return <Object?>[
      fiType,
      identifiers,
    ];
  }

  static NativeFIPFiTypeIdentifier decode(Object result) {
    result as List<Object?>;
    return NativeFIPFiTypeIdentifier(
      fiType: result[0]! as String,
      identifiers: (result[1] as List<Object?>?)!.cast<NativeTypeIdentifier?>(),
    );
  }
}

class NativeTypeIdentifier {
  NativeTypeIdentifier({
    required this.type,
    required this.category,
  });

  String type;

  String category;

  Object encode() {
    return <Object?>[
      type,
      category,
    ];
  }

  static NativeTypeIdentifier decode(Object result) {
    result as List<Object?>;
    return NativeTypeIdentifier(
      type: result[0]! as String,
      category: result[1]! as String,
    );
  }
}

class NativeTypeIdentifierInfo {
  NativeTypeIdentifierInfo({
    required this.category,
    required this.type,
    required this.value,
  });

  String category;

  String type;

  String value;

  Object encode() {
    return <Object?>[
      category,
      type,
      value,
    ];
  }

  static NativeTypeIdentifierInfo decode(Object result) {
    result as List<Object?>;
    return NativeTypeIdentifierInfo(
      category: result[0]! as String,
      type: result[1]! as String,
      value: result[2]! as String,
    );
  }
}

class NativeDiscoveredAccountInfo {
  NativeDiscoveredAccountInfo({
    required this.accountType,
    required this.accountReferenceNumber,
    required this.maskedAccountNumber,
    required this.fiType,
  });

  String accountType;

  String accountReferenceNumber;

  String maskedAccountNumber;

  String fiType;

  Object encode() {
    return <Object?>[
      accountType,
      accountReferenceNumber,
      maskedAccountNumber,
      fiType,
    ];
  }

  static NativeDiscoveredAccountInfo decode(Object result) {
    result as List<Object?>;
    return NativeDiscoveredAccountInfo(
      accountType: result[0]! as String,
      accountReferenceNumber: result[1]! as String,
      maskedAccountNumber: result[2]! as String,
      fiType: result[3]! as String,
    );
  }
}

class NativeDiscoveredAccountsResponse {
  NativeDiscoveredAccountsResponse({
    required this.accounts,
  });

  List<NativeDiscoveredAccountInfo?> accounts;

  Object encode() {
    return <Object?>[
      accounts,
    ];
  }

  static NativeDiscoveredAccountsResponse decode(Object result) {
    result as List<Object?>;
    return NativeDiscoveredAccountsResponse(
      accounts: (result[0] as List<Object?>?)!.cast<NativeDiscoveredAccountInfo?>(),
    );
  }
}

class NativeAccountLinkingRequestReference {
  NativeAccountLinkingRequestReference({
    required this.referenceNumber,
  });

  String referenceNumber;

  Object encode() {
    return <Object?>[
      referenceNumber,
    ];
  }

  static NativeAccountLinkingRequestReference decode(Object result) {
    result as List<Object?>;
    return NativeAccountLinkingRequestReference(
      referenceNumber: result[0]! as String,
    );
  }
}

class NativeLinkedAccountInfo {
  NativeLinkedAccountInfo({
    required this.customerAddress,
    required this.linkReferenceNumber,
    required this.accountReferenceNumber,
    required this.status,
  });

  String customerAddress;

  String linkReferenceNumber;

  String accountReferenceNumber;

  String status;

  Object encode() {
    return <Object?>[
      customerAddress,
      linkReferenceNumber,
      accountReferenceNumber,
      status,
    ];
  }

  static NativeLinkedAccountInfo decode(Object result) {
    result as List<Object?>;
    return NativeLinkedAccountInfo(
      customerAddress: result[0]! as String,
      linkReferenceNumber: result[1]! as String,
      accountReferenceNumber: result[2]! as String,
      status: result[3]! as String,
    );
  }
}

class NativeConfirmAccountLinkingInfo {
  NativeConfirmAccountLinkingInfo({
    required this.linkedAccounts,
  });

  List<NativeLinkedAccountInfo?> linkedAccounts;

  Object encode() {
    return <Object?>[
      linkedAccounts,
    ];
  }

  static NativeConfirmAccountLinkingInfo decode(Object result) {
    result as List<Object?>;
    return NativeConfirmAccountLinkingInfo(
      linkedAccounts: (result[0] as List<Object?>?)!.cast<NativeLinkedAccountInfo?>(),
    );
  }
}

class NativeLinkedAccountsResponse {
  NativeLinkedAccountsResponse({
    required this.linkedAccounts,
  });

  List<NativeLinkedAccountDetailsInfo?> linkedAccounts;

  Object encode() {
    return <Object?>[
      linkedAccounts,
    ];
  }

  static NativeLinkedAccountsResponse decode(Object result) {
    result as List<Object?>;
    return NativeLinkedAccountsResponse(
      linkedAccounts: (result[0] as List<Object?>?)!.cast<NativeLinkedAccountDetailsInfo?>(),
    );
  }
}

class NativeLinkedAccountDetailsInfo {
  NativeLinkedAccountDetailsInfo({
    required this.userId,
    required this.fipId,
    required this.fipName,
    required this.maskedAccountNumber,
    required this.accountReferenceNumber,
    required this.linkReferenceNumber,
    this.consentIdList,
    required this.fiType,
    required this.accountType,
    this.linkedAccountUpdateTimestamp,
    required this.authenticatorType,
  });

  String userId;

  String fipId;

  String fipName;

  String maskedAccountNumber;

  String accountReferenceNumber;

  String linkReferenceNumber;

  List<String?>? consentIdList;

  String fiType;

  String accountType;

  String? linkedAccountUpdateTimestamp;

  String authenticatorType;

  Object encode() {
    return <Object?>[
      userId,
      fipId,
      fipName,
      maskedAccountNumber,
      accountReferenceNumber,
      linkReferenceNumber,
      consentIdList,
      fiType,
      accountType,
      linkedAccountUpdateTimestamp,
      authenticatorType,
    ];
  }

  static NativeLinkedAccountDetailsInfo decode(Object result) {
    result as List<Object?>;
    return NativeLinkedAccountDetailsInfo(
      userId: result[0]! as String,
      fipId: result[1]! as String,
      fipName: result[2]! as String,
      maskedAccountNumber: result[3]! as String,
      accountReferenceNumber: result[4]! as String,
      linkReferenceNumber: result[5]! as String,
      consentIdList: (result[6] as List<Object?>?)?.cast<String?>(),
      fiType: result[7]! as String,
      accountType: result[8]! as String,
      linkedAccountUpdateTimestamp: result[9] as String?,
      authenticatorType: result[10]! as String,
    );
  }
}

class NativeFinancialInformationEntity {
  NativeFinancialInformationEntity({
    required this.id,
    required this.name,
  });

  String id;

  String name;

  Object encode() {
    return <Object?>[
      id,
      name,
    ];
  }

  static NativeFinancialInformationEntity decode(Object result) {
    result as List<Object?>;
    return NativeFinancialInformationEntity(
      id: result[0]! as String,
      name: result[1]! as String,
    );
  }
}

class NativeConsentPurposeInfo {
  NativeConsentPurposeInfo({
    required this.code,
    required this.text,
  });

  String code;

  String text;

  Object encode() {
    return <Object?>[
      code,
      text,
    ];
  }

  static NativeConsentPurposeInfo decode(Object result) {
    result as List<Object?>;
    return NativeConsentPurposeInfo(
      code: result[0]! as String,
      text: result[1]! as String,
    );
  }
}

class NativeConsentRequestDetailInfo {
  NativeConsentRequestDetailInfo({
    required this.consentHandleId,
    this.consentId,
    required this.financialInformationUser,
    required this.consentPurposeInfo,
    required this.consentDisplayDescriptions,
    required this.dataDateTimeRange,
    required this.consentDateTimeRange,
    required this.consentDataFrequency,
    required this.consentDataLifePeriod,
    this.fiTypes,
    this.statusLastUpdateTimestamp,
  });

  String consentHandleId;

  String? consentId;

  NativeFinancialInformationEntity financialInformationUser;

  NativeConsentPurposeInfo consentPurposeInfo;

  List<String?> consentDisplayDescriptions;

  NativeDateTimeRange dataDateTimeRange;

  NativeDateTimeRange consentDateTimeRange;

  NativeConsentDataFrequency consentDataFrequency;

  NativeConsentDataLifePeriod consentDataLifePeriod;

  List<String?>? fiTypes;

  String? statusLastUpdateTimestamp;

  Object encode() {
    return <Object?>[
      consentHandleId,
      consentId,
      financialInformationUser.encode(),
      consentPurposeInfo.encode(),
      consentDisplayDescriptions,
      dataDateTimeRange.encode(),
      consentDateTimeRange.encode(),
      consentDataFrequency.encode(),
      consentDataLifePeriod.encode(),
      fiTypes,
      statusLastUpdateTimestamp,
    ];
  }

  static NativeConsentRequestDetailInfo decode(Object result) {
    result as List<Object?>;
    return NativeConsentRequestDetailInfo(
      consentHandleId: result[0]! as String,
      consentId: result[1] as String?,
      financialInformationUser: NativeFinancialInformationEntity.decode(result[2]! as List<Object?>),
      consentPurposeInfo: NativeConsentPurposeInfo.decode(result[3]! as List<Object?>),
      consentDisplayDescriptions: (result[4] as List<Object?>?)!.cast<String?>(),
      dataDateTimeRange: NativeDateTimeRange.decode(result[5]! as List<Object?>),
      consentDateTimeRange: NativeDateTimeRange.decode(result[6]! as List<Object?>),
      consentDataFrequency: NativeConsentDataFrequency.decode(result[7]! as List<Object?>),
      consentDataLifePeriod: NativeConsentDataLifePeriod.decode(result[8]! as List<Object?>),
      fiTypes: (result[9] as List<Object?>?)?.cast<String?>(),
      statusLastUpdateTimestamp: result[10] as String?,
    );
  }
}

class NativeDateTimeRange {
  NativeDateTimeRange({
    required this.from,
    required this.to,
  });

  String from;

  String to;

  Object encode() {
    return <Object?>[
      from,
      to,
    ];
  }

  static NativeDateTimeRange decode(Object result) {
    result as List<Object?>;
    return NativeDateTimeRange(
      from: result[0]! as String,
      to: result[1]! as String,
    );
  }
}

class NativeConsentDataFrequency {
  NativeConsentDataFrequency({
    required this.unit,
    required this.value,
  });

  String unit;

  double value;

  Object encode() {
    return <Object?>[
      unit,
      value,
    ];
  }

  static NativeConsentDataFrequency decode(Object result) {
    result as List<Object?>;
    return NativeConsentDataFrequency(
      unit: result[0]! as String,
      value: result[1]! as double,
    );
  }
}

class NativeConsentDataLifePeriod {
  NativeConsentDataLifePeriod({
    required this.unit,
    required this.value,
  });

  String unit;

  double value;

  Object encode() {
    return <Object?>[
      unit,
      value,
    ];
  }

  static NativeConsentDataLifePeriod decode(Object result) {
    result as List<Object?>;
    return NativeConsentDataLifePeriod(
      unit: result[0]! as String,
      value: result[1]! as double,
    );
  }
}

class NativeConsentInfo {
  NativeConsentInfo({
    required this.consentId,
    this.fipId,
  });

  String consentId;

  String? fipId;

  Object encode() {
    return <Object?>[
      consentId,
      fipId,
    ];
  }

  static NativeConsentInfo decode(Object result) {
    result as List<Object?>;
    return NativeConsentInfo(
      consentId: result[0]! as String,
      fipId: result[1] as String?,
    );
  }
}

class NativeProcessConsentRequestResponse {
  NativeProcessConsentRequestResponse({
    this.consentIntentId,
    this.consentInfo,
  });

  String? consentIntentId;

  List<NativeConsentInfo?>? consentInfo;

  Object encode() {
    return <Object?>[
      consentIntentId,
      consentInfo,
    ];
  }

  static NativeProcessConsentRequestResponse decode(Object result) {
    result as List<Object?>;
    return NativeProcessConsentRequestResponse(
      consentIntentId: result[0] as String?,
      consentInfo: (result[1] as List<Object?>?)?.cast<NativeConsentInfo?>(),
    );
  }
}

class NativeUserConsentInfoDetails {
  NativeUserConsentInfoDetails({
    required this.consentId,
    this.consentIntentEntityId,
    required this.consentIntentEntityName,
    required this.consentIdList,
    required this.consentIntentUpdateTimestamp,
    required this.consentPurposeText,
    this.status,
  });

  String consentId;

  String? consentIntentEntityId;

  String consentIntentEntityName;

  List<String?> consentIdList;

  String consentIntentUpdateTimestamp;

  String consentPurposeText;

  String? status;

  Object encode() {
    return <Object?>[
      consentId,
      consentIntentEntityId,
      consentIntentEntityName,
      consentIdList,
      consentIntentUpdateTimestamp,
      consentPurposeText,
      status,
    ];
  }

  static NativeUserConsentInfoDetails decode(Object result) {
    result as List<Object?>;
    return NativeUserConsentInfoDetails(
      consentId: result[0]! as String,
      consentIntentEntityId: result[1] as String?,
      consentIntentEntityName: result[2]! as String,
      consentIdList: (result[3] as List<Object?>?)!.cast<String?>(),
      consentIntentUpdateTimestamp: result[4]! as String,
      consentPurposeText: result[5]! as String,
      status: result[6] as String?,
    );
  }
}

class NativeAccountAggregator {
  NativeAccountAggregator({
    required this.id,
  });

  String id;

  Object encode() {
    return <Object?>[
      id,
    ];
  }

  static NativeAccountAggregator decode(Object result) {
    result as List<Object?>;
    return NativeAccountAggregator(
      id: result[0]! as String,
    );
  }
}

class NativeFIPReference {
  NativeFIPReference({
    required this.fipId,
    required this.fipName,
  });

  String fipId;

  String fipName;

  Object encode() {
    return <Object?>[
      fipId,
      fipName,
    ];
  }

  static NativeFIPReference decode(Object result) {
    result as List<Object?>;
    return NativeFIPReference(
      fipId: result[0]! as String,
      fipName: result[1]! as String,
    );
  }
}

class NativeLoginOtpReference {
  NativeLoginOtpReference({
    required this.reference,
  });

  String reference;

  Object encode() {
    return <Object?>[
      reference,
    ];
  }

  static NativeLoginOtpReference decode(Object result) {
    result as List<Object?>;
    return NativeLoginOtpReference(
      reference: result[0]! as String,
    );
  }
}

class NativeConsentHandleStatusResponse {
  NativeConsentHandleStatusResponse({
    required this.status,
  });

  String status;

  Object encode() {
    return <Object?>[
      status,
    ];
  }

  static NativeConsentHandleStatusResponse decode(Object result) {
    result as List<Object?>;
    return NativeConsentHandleStatusResponse(
      status: result[0]! as String,
    );
  }
}

class NativeFIPInfo {
  NativeFIPInfo({
    required this.fipId,
    this.productName,
    required this.fipFitypes,
    this.fipFsr,
    this.productDesc,
    this.productIconUri,
    required this.enabled,
  });

  String fipId;

  String? productName;

  List<String?> fipFitypes;

  String? fipFsr;

  String? productDesc;

  String? productIconUri;

  bool enabled;

  Object encode() {
    return <Object?>[
      fipId,
      productName,
      fipFitypes,
      fipFsr,
      productDesc,
      productIconUri,
      enabled,
    ];
  }

  static NativeFIPInfo decode(Object result) {
    result as List<Object?>;
    return NativeFIPInfo(
      fipId: result[0]! as String,
      productName: result[1] as String?,
      fipFitypes: (result[2] as List<Object?>?)!.cast<String?>(),
      fipFsr: result[3] as String?,
      productDesc: result[4] as String?,
      productIconUri: result[5] as String?,
      enabled: result[6]! as bool,
    );
  }
}

class NativeFIPSearchResponse {
  NativeFIPSearchResponse({
    required this.searchOptions,
  });

  List<NativeFIPInfo?> searchOptions;

  Object encode() {
    return <Object?>[
      searchOptions,
    ];
  }

  static NativeFIPSearchResponse decode(Object result) {
    result as List<Object?>;
    return NativeFIPSearchResponse(
      searchOptions: (result[0] as List<Object?>?)!.cast<NativeFIPInfo?>(),
    );
  }
}

class NativeEntityInfo {
  NativeEntityInfo({
    required this.entityId,
    required this.entityName,
    this.entityIconUri,
    this.entityLogoUri,
    this.entityLogoWithNameUri,
  });

  String entityId;

  String entityName;

  String? entityIconUri;

  String? entityLogoUri;

  String? entityLogoWithNameUri;

  Object encode() {
    return <Object?>[
      entityId,
      entityName,
      entityIconUri,
      entityLogoUri,
      entityLogoWithNameUri,
    ];
  }

  static NativeEntityInfo decode(Object result) {
    result as List<Object?>;
    return NativeEntityInfo(
      entityId: result[0]! as String,
      entityName: result[1]! as String,
      entityIconUri: result[2] as String?,
      entityLogoUri: result[3] as String?,
      entityLogoWithNameUri: result[4] as String?,
    );
  }
}

class _NativeFinvuManagerCodec extends StandardMessageCodec {
  const _NativeFinvuManagerCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is NativeAccountAggregator) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is NativeAccountLinkingRequestReference) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is NativeConfirmAccountLinkingInfo) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is NativeConsentDataFrequency) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is NativeConsentDataLifePeriod) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is NativeConsentHandleStatusResponse) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is NativeConsentInfo) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is NativeConsentPurposeInfo) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is NativeConsentRequestDetailInfo) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is NativeDateTimeRange) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is NativeDiscoveredAccountInfo) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is NativeDiscoveredAccountsResponse) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is NativeEntityInfo) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is NativeFIPDetails) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is NativeFIPFiTypeIdentifier) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is NativeFIPInfo) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is NativeFIPReference) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is NativeFIPSearchResponse) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is NativeFinancialInformationEntity) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else if (value is NativeFinvuConfig) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else if (value is NativeHandleInfo) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    } else if (value is NativeLinkedAccountDetailsInfo) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    } else if (value is NativeLinkedAccountInfo) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    } else if (value is NativeLinkedAccountsResponse) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else if (value is NativeLoginOtpReference) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    } else if (value is NativeProcessConsentRequestResponse) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    } else if (value is NativeTypeIdentifier) {
      buffer.putUint8(154);
      writeValue(buffer, value.encode());
    } else if (value is NativeTypeIdentifierInfo) {
      buffer.putUint8(155);
      writeValue(buffer, value.encode());
    } else if (value is NativeUserConsentInfoDetails) {
      buffer.putUint8(156);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return NativeAccountAggregator.decode(readValue(buffer)!);
      case 129: 
        return NativeAccountLinkingRequestReference.decode(readValue(buffer)!);
      case 130: 
        return NativeConfirmAccountLinkingInfo.decode(readValue(buffer)!);
      case 131: 
        return NativeConsentDataFrequency.decode(readValue(buffer)!);
      case 132: 
        return NativeConsentDataLifePeriod.decode(readValue(buffer)!);
      case 133: 
        return NativeConsentHandleStatusResponse.decode(readValue(buffer)!);
      case 134: 
        return NativeConsentInfo.decode(readValue(buffer)!);
      case 135: 
        return NativeConsentPurposeInfo.decode(readValue(buffer)!);
      case 136: 
        return NativeConsentRequestDetailInfo.decode(readValue(buffer)!);
      case 137: 
        return NativeDateTimeRange.decode(readValue(buffer)!);
      case 138: 
        return NativeDiscoveredAccountInfo.decode(readValue(buffer)!);
      case 139: 
        return NativeDiscoveredAccountsResponse.decode(readValue(buffer)!);
      case 140: 
        return NativeEntityInfo.decode(readValue(buffer)!);
      case 141: 
        return NativeFIPDetails.decode(readValue(buffer)!);
      case 142: 
        return NativeFIPFiTypeIdentifier.decode(readValue(buffer)!);
      case 143: 
        return NativeFIPInfo.decode(readValue(buffer)!);
      case 144: 
        return NativeFIPReference.decode(readValue(buffer)!);
      case 145: 
        return NativeFIPSearchResponse.decode(readValue(buffer)!);
      case 146: 
        return NativeFinancialInformationEntity.decode(readValue(buffer)!);
      case 147: 
        return NativeFinvuConfig.decode(readValue(buffer)!);
      case 148: 
        return NativeHandleInfo.decode(readValue(buffer)!);
      case 149: 
        return NativeLinkedAccountDetailsInfo.decode(readValue(buffer)!);
      case 150: 
        return NativeLinkedAccountInfo.decode(readValue(buffer)!);
      case 151: 
        return NativeLinkedAccountsResponse.decode(readValue(buffer)!);
      case 152: 
        return NativeLoginOtpReference.decode(readValue(buffer)!);
      case 153: 
        return NativeProcessConsentRequestResponse.decode(readValue(buffer)!);
      case 154: 
        return NativeTypeIdentifier.decode(readValue(buffer)!);
      case 155: 
        return NativeTypeIdentifierInfo.decode(readValue(buffer)!);
      case 156: 
        return NativeUserConsentInfoDetails.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class NativeFinvuManager {
  /// Constructor for [NativeFinvuManager].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NativeFinvuManager({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _NativeFinvuManagerCodec();

  Future<void> initialize(NativeFinvuConfig config) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.initialize';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[config]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> connect() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.connect';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disconnect() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.disconnect';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isConnected() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.isConnected';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<bool> hasSession() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.hasSession';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }

  Future<NativeLoginOtpReference> loginWithUsernameOrMobileNumberAndConsentHandle(String? username, String? mobileNumber, String consentHandleId) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.loginWithUsernameOrMobileNumberAndConsentHandle';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[username, mobileNumber, consentHandleId]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeLoginOtpReference?)!;
    }
  }

  Future<NativeHandleInfo> verifyLoginOtp(String otp, String otpReference) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.verifyLoginOtp';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[otp, otpReference]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeHandleInfo?)!;
    }
  }

  Future<NativeDiscoveredAccountsResponse> discoverAccountsAsync(String fipId, List<String?> fiTypes, List<NativeTypeIdentifierInfo?> identifiers) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.discoverAccountsAsync';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[fipId, fiTypes, identifiers]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeDiscoveredAccountsResponse?)!;
    }
  }

  Future<NativeDiscoveredAccountsResponse> discoverAccounts(String fipId, List<String?> fiTypes, List<NativeTypeIdentifierInfo?> identifiers) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.discoverAccounts';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[fipId, fiTypes, identifiers]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeDiscoveredAccountsResponse?)!;
    }
  }

  Future<NativeAccountLinkingRequestReference> linkAccounts(NativeFIPDetails fipDetails, List<NativeDiscoveredAccountInfo?> accounts) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.linkAccounts';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[fipDetails, accounts]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeAccountLinkingRequestReference?)!;
    }
  }

  Future<NativeConfirmAccountLinkingInfo> confirmAccountLinking(NativeAccountLinkingRequestReference requestReference, String otp) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.confirmAccountLinking';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[requestReference, otp]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeConfirmAccountLinkingInfo?)!;
    }
  }

  Future<NativeLinkedAccountsResponse> fetchLinkedAccounts() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.fetchLinkedAccounts';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeLinkedAccountsResponse?)!;
    }
  }

  Future<void> initiateMobileVerification(String mobileNumber) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.initiateMobileVerification';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[mobileNumber]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> completeMobileVerification(String mobileNumber, String otp) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.completeMobileVerification';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[mobileNumber, otp]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<NativeFIPSearchResponse> fipsAllFIPOptions() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.fipsAllFIPOptions';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeFIPSearchResponse?)!;
    }
  }

  Future<NativeFIPDetails> fetchFIPDetails(String fipId) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.fetchFIPDetails';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[fipId]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeFIPDetails?)!;
    }
  }

  Future<NativeEntityInfo> getEntityInfo(String entityId, String entityType) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.getEntityInfo';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[entityId, entityType]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeEntityInfo?)!;
    }
  }

  Future<NativeProcessConsentRequestResponse> approveConsentRequest(NativeConsentRequestDetailInfo consentRequest, List<NativeLinkedAccountDetailsInfo?> linkedAccounts) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.approveConsentRequest';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[consentRequest, linkedAccounts]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeProcessConsentRequestResponse?)!;
    }
  }

  Future<NativeProcessConsentRequestResponse> denyConsentRequest(NativeConsentRequestDetailInfo consentRequest) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.denyConsentRequest';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[consentRequest]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeProcessConsentRequestResponse?)!;
    }
  }

  Future<void> revokeConsent(NativeUserConsentInfoDetails consent, NativeAccountAggregator? accountAggregator, NativeFIPReference? fipDetails) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.revokeConsent';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[consent, accountAggregator, fipDetails]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<NativeConsentHandleStatusResponse> getConsentHandleStatus(String handleId) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.getConsentHandleStatus';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handleId]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeConsentHandleStatusResponse?)!;
    }
  }

  Future<NativeConsentRequestDetailInfo> getConsentRequestDetails(String handleId) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.getConsentRequestDetails';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[handleId]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeConsentRequestDetailInfo?)!;
    }
  }

  Future<void> logout() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.logout';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}
