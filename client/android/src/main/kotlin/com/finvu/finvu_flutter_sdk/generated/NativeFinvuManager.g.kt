// Autogenerated from Pigeon (v14.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is NativeFinvuError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class NativeFinvuError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeFinvuConfig (
  val finvuEndpoint: String,
  val certificatePins: List<String?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeFinvuConfig {
      val finvuEndpoint = list[0] as String
      val certificatePins = list[1] as List<String?>?
      return NativeFinvuConfig(finvuEndpoint, certificatePins)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      finvuEndpoint,
      certificatePins,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeHandleInfo (
  val userId: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeHandleInfo {
      val userId = list[0] as String
      return NativeHandleInfo(userId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      userId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeFIPDetails (
  val fipId: String,
  val typeIdentifiers: List<NativeFIPFiTypeIdentifier?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeFIPDetails {
      val fipId = list[0] as String
      val typeIdentifiers = list[1] as List<NativeFIPFiTypeIdentifier?>
      return NativeFIPDetails(fipId, typeIdentifiers)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      fipId,
      typeIdentifiers,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeFIPFiTypeIdentifier (
  val fiType: String,
  val identifiers: List<NativeTypeIdentifier?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeFIPFiTypeIdentifier {
      val fiType = list[0] as String
      val identifiers = list[1] as List<NativeTypeIdentifier?>
      return NativeFIPFiTypeIdentifier(fiType, identifiers)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      fiType,
      identifiers,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeTypeIdentifier (
  val type: String,
  val category: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeTypeIdentifier {
      val type = list[0] as String
      val category = list[1] as String
      return NativeTypeIdentifier(type, category)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      type,
      category,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeTypeIdentifierInfo (
  val category: String,
  val type: String,
  val value: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeTypeIdentifierInfo {
      val category = list[0] as String
      val type = list[1] as String
      val value = list[2] as String
      return NativeTypeIdentifierInfo(category, type, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      category,
      type,
      value,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeDiscoveredAccountInfo (
  val accountType: String,
  val accountReferenceNumber: String,
  val maskedAccountNumber: String,
  val fiType: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeDiscoveredAccountInfo {
      val accountType = list[0] as String
      val accountReferenceNumber = list[1] as String
      val maskedAccountNumber = list[2] as String
      val fiType = list[3] as String
      return NativeDiscoveredAccountInfo(accountType, accountReferenceNumber, maskedAccountNumber, fiType)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      accountType,
      accountReferenceNumber,
      maskedAccountNumber,
      fiType,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeDiscoveredAccountsResponse (
  val accounts: List<NativeDiscoveredAccountInfo?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeDiscoveredAccountsResponse {
      val accounts = list[0] as List<NativeDiscoveredAccountInfo?>
      return NativeDiscoveredAccountsResponse(accounts)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      accounts,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAccountLinkingRequestReference (
  val referenceNumber: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeAccountLinkingRequestReference {
      val referenceNumber = list[0] as String
      return NativeAccountLinkingRequestReference(referenceNumber)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      referenceNumber,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeLinkedAccountInfo (
  val customerAddress: String,
  val linkReferenceNumber: String,
  val accountReferenceNumber: String,
  val status: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeLinkedAccountInfo {
      val customerAddress = list[0] as String
      val linkReferenceNumber = list[1] as String
      val accountReferenceNumber = list[2] as String
      val status = list[3] as String
      return NativeLinkedAccountInfo(customerAddress, linkReferenceNumber, accountReferenceNumber, status)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      customerAddress,
      linkReferenceNumber,
      accountReferenceNumber,
      status,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeConfirmAccountLinkingInfo (
  val linkedAccounts: List<NativeLinkedAccountInfo?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeConfirmAccountLinkingInfo {
      val linkedAccounts = list[0] as List<NativeLinkedAccountInfo?>
      return NativeConfirmAccountLinkingInfo(linkedAccounts)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      linkedAccounts,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeLinkedAccountsResponse (
  val linkedAccounts: List<NativeLinkedAccountDetailsInfo?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeLinkedAccountsResponse {
      val linkedAccounts = list[0] as List<NativeLinkedAccountDetailsInfo?>
      return NativeLinkedAccountsResponse(linkedAccounts)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      linkedAccounts,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeLinkedAccountDetailsInfo (
  val userId: String,
  val fipId: String,
  val fipName: String,
  val maskedAccountNumber: String,
  val accountReferenceNumber: String,
  val linkReferenceNumber: String,
  val consentIdList: List<String?>? = null,
  val fiType: String,
  val accountType: String,
  val linkedAccountUpdateTimestamp: String? = null,
  val authenticatorType: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeLinkedAccountDetailsInfo {
      val userId = list[0] as String
      val fipId = list[1] as String
      val fipName = list[2] as String
      val maskedAccountNumber = list[3] as String
      val accountReferenceNumber = list[4] as String
      val linkReferenceNumber = list[5] as String
      val consentIdList = list[6] as List<String?>?
      val fiType = list[7] as String
      val accountType = list[8] as String
      val linkedAccountUpdateTimestamp = list[9] as String?
      val authenticatorType = list[10] as String
      return NativeLinkedAccountDetailsInfo(userId, fipId, fipName, maskedAccountNumber, accountReferenceNumber, linkReferenceNumber, consentIdList, fiType, accountType, linkedAccountUpdateTimestamp, authenticatorType)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      userId,
      fipId,
      fipName,
      maskedAccountNumber,
      accountReferenceNumber,
      linkReferenceNumber,
      consentIdList,
      fiType,
      accountType,
      linkedAccountUpdateTimestamp,
      authenticatorType,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeFinancialInformationEntity (
  val id: String,
  val name: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeFinancialInformationEntity {
      val id = list[0] as String
      val name = list[1] as String
      return NativeFinancialInformationEntity(id, name)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      name,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeConsentPurposeInfo (
  val code: String,
  val text: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeConsentPurposeInfo {
      val code = list[0] as String
      val text = list[1] as String
      return NativeConsentPurposeInfo(code, text)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      code,
      text,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeConsentRequestDetailInfo (
  val consentHandleId: String,
  val consentId: String? = null,
  val financialInformationUser: NativeFinancialInformationEntity,
  val consentPurposeInfo: NativeConsentPurposeInfo,
  val consentDisplayDescriptions: List<String?>,
  val dataDateTimeRange: NativeDateTimeRange,
  val consentDateTimeRange: NativeDateTimeRange,
  val consentDataFrequency: NativeConsentDataFrequency,
  val consentDataLifePeriod: NativeConsentDataLifePeriod,
  val fiTypes: List<String?>? = null,
  val statusLastUpdateTimestamp: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeConsentRequestDetailInfo {
      val consentHandleId = list[0] as String
      val consentId = list[1] as String?
      val financialInformationUser = NativeFinancialInformationEntity.fromList(list[2] as List<Any?>)
      val consentPurposeInfo = NativeConsentPurposeInfo.fromList(list[3] as List<Any?>)
      val consentDisplayDescriptions = list[4] as List<String?>
      val dataDateTimeRange = NativeDateTimeRange.fromList(list[5] as List<Any?>)
      val consentDateTimeRange = NativeDateTimeRange.fromList(list[6] as List<Any?>)
      val consentDataFrequency = NativeConsentDataFrequency.fromList(list[7] as List<Any?>)
      val consentDataLifePeriod = NativeConsentDataLifePeriod.fromList(list[8] as List<Any?>)
      val fiTypes = list[9] as List<String?>?
      val statusLastUpdateTimestamp = list[10] as String?
      return NativeConsentRequestDetailInfo(consentHandleId, consentId, financialInformationUser, consentPurposeInfo, consentDisplayDescriptions, dataDateTimeRange, consentDateTimeRange, consentDataFrequency, consentDataLifePeriod, fiTypes, statusLastUpdateTimestamp)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      consentHandleId,
      consentId,
      financialInformationUser.toList(),
      consentPurposeInfo.toList(),
      consentDisplayDescriptions,
      dataDateTimeRange.toList(),
      consentDateTimeRange.toList(),
      consentDataFrequency.toList(),
      consentDataLifePeriod.toList(),
      fiTypes,
      statusLastUpdateTimestamp,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeDateTimeRange (
  val from: String,
  val to: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeDateTimeRange {
      val from = list[0] as String
      val to = list[1] as String
      return NativeDateTimeRange(from, to)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      from,
      to,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeConsentDataFrequency (
  val unit: String,
  val value: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeConsentDataFrequency {
      val unit = list[0] as String
      val value = list[1] as Double
      return NativeConsentDataFrequency(unit, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      unit,
      value,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeConsentDataLifePeriod (
  val unit: String,
  val value: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeConsentDataLifePeriod {
      val unit = list[0] as String
      val value = list[1] as Double
      return NativeConsentDataLifePeriod(unit, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      unit,
      value,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeConsentInfo (
  val consentId: String,
  val fipId: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeConsentInfo {
      val consentId = list[0] as String
      val fipId = list[1] as String?
      return NativeConsentInfo(consentId, fipId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      consentId,
      fipId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeProcessConsentRequestResponse (
  val consentIntentId: String? = null,
  val consentInfo: List<NativeConsentInfo?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeProcessConsentRequestResponse {
      val consentIntentId = list[0] as String?
      val consentInfo = list[1] as List<NativeConsentInfo?>?
      return NativeProcessConsentRequestResponse(consentIntentId, consentInfo)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      consentIntentId,
      consentInfo,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeUserConsentInfoDetails (
  val consentId: String,
  val consentIntentEntityId: String? = null,
  val consentIntentEntityName: String,
  val consentIdList: List<String?>,
  val consentIntentUpdateTimestamp: String,
  val consentPurposeText: String,
  val status: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeUserConsentInfoDetails {
      val consentId = list[0] as String
      val consentIntentEntityId = list[1] as String?
      val consentIntentEntityName = list[2] as String
      val consentIdList = list[3] as List<String?>
      val consentIntentUpdateTimestamp = list[4] as String
      val consentPurposeText = list[5] as String
      val status = list[6] as String?
      return NativeUserConsentInfoDetails(consentId, consentIntentEntityId, consentIntentEntityName, consentIdList, consentIntentUpdateTimestamp, consentPurposeText, status)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      consentId,
      consentIntentEntityId,
      consentIntentEntityName,
      consentIdList,
      consentIntentUpdateTimestamp,
      consentPurposeText,
      status,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAccountAggregator (
  val id: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeAccountAggregator {
      val id = list[0] as String
      return NativeAccountAggregator(id)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeFIPReference (
  val fipId: String,
  val fipName: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeFIPReference {
      val fipId = list[0] as String
      val fipName = list[1] as String
      return NativeFIPReference(fipId, fipName)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      fipId,
      fipName,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeLoginOtpReference (
  val reference: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeLoginOtpReference {
      val reference = list[0] as String
      return NativeLoginOtpReference(reference)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      reference,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeConsentHandleStatusResponse (
  val status: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeConsentHandleStatusResponse {
      val status = list[0] as String
      return NativeConsentHandleStatusResponse(status)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      status,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeFIPInfo (
  val fipId: String,
  val productName: String? = null,
  val fipFitypes: List<String?>,
  val fipFsr: String? = null,
  val productDesc: String? = null,
  val productIconUri: String? = null,
  val enabled: Boolean

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeFIPInfo {
      val fipId = list[0] as String
      val productName = list[1] as String?
      val fipFitypes = list[2] as List<String?>
      val fipFsr = list[3] as String?
      val productDesc = list[4] as String?
      val productIconUri = list[5] as String?
      val enabled = list[6] as Boolean
      return NativeFIPInfo(fipId, productName, fipFitypes, fipFsr, productDesc, productIconUri, enabled)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      fipId,
      productName,
      fipFitypes,
      fipFsr,
      productDesc,
      productIconUri,
      enabled,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeFIPSearchResponse (
  val searchOptions: List<NativeFIPInfo?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeFIPSearchResponse {
      val searchOptions = list[0] as List<NativeFIPInfo?>
      return NativeFIPSearchResponse(searchOptions)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      searchOptions,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeEntityInfo (
  val entityId: String,
  val entityName: String,
  val entityIconUri: String? = null,
  val entityLogoUri: String? = null,
  val entityLogoWithNameUri: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeEntityInfo {
      val entityId = list[0] as String
      val entityName = list[1] as String
      val entityIconUri = list[2] as String?
      val entityLogoUri = list[3] as String?
      val entityLogoWithNameUri = list[4] as String?
      return NativeEntityInfo(entityId, entityName, entityIconUri, entityLogoUri, entityLogoWithNameUri)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      entityId,
      entityName,
      entityIconUri,
      entityLogoUri,
      entityLogoWithNameUri,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object NativeFinvuManagerCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAccountAggregator.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAccountLinkingRequestReference.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeConfirmAccountLinkingInfo.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeConsentDataFrequency.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeConsentDataLifePeriod.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeConsentHandleStatusResponse.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeConsentInfo.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeConsentPurposeInfo.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeConsentRequestDetailInfo.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeDateTimeRange.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeDiscoveredAccountInfo.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeDiscoveredAccountsResponse.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeEntityInfo.fromList(it)
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeFIPDetails.fromList(it)
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeFIPFiTypeIdentifier.fromList(it)
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeFIPInfo.fromList(it)
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeFIPReference.fromList(it)
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeFIPSearchResponse.fromList(it)
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeFinancialInformationEntity.fromList(it)
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeFinvuConfig.fromList(it)
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeHandleInfo.fromList(it)
        }
      }
      149.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeLinkedAccountDetailsInfo.fromList(it)
        }
      }
      150.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeLinkedAccountInfo.fromList(it)
        }
      }
      151.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeLinkedAccountsResponse.fromList(it)
        }
      }
      152.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeLoginOtpReference.fromList(it)
        }
      }
      153.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeProcessConsentRequestResponse.fromList(it)
        }
      }
      154.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeTypeIdentifier.fromList(it)
        }
      }
      155.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeTypeIdentifierInfo.fromList(it)
        }
      }
      156.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserConsentInfoDetails.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NativeAccountAggregator -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is NativeAccountLinkingRequestReference -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is NativeConfirmAccountLinkingInfo -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is NativeConsentDataFrequency -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is NativeConsentDataLifePeriod -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is NativeConsentHandleStatusResponse -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is NativeConsentInfo -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is NativeConsentPurposeInfo -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is NativeConsentRequestDetailInfo -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is NativeDateTimeRange -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is NativeDiscoveredAccountInfo -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is NativeDiscoveredAccountsResponse -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is NativeEntityInfo -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      is NativeFIPDetails -> {
        stream.write(141)
        writeValue(stream, value.toList())
      }
      is NativeFIPFiTypeIdentifier -> {
        stream.write(142)
        writeValue(stream, value.toList())
      }
      is NativeFIPInfo -> {
        stream.write(143)
        writeValue(stream, value.toList())
      }
      is NativeFIPReference -> {
        stream.write(144)
        writeValue(stream, value.toList())
      }
      is NativeFIPSearchResponse -> {
        stream.write(145)
        writeValue(stream, value.toList())
      }
      is NativeFinancialInformationEntity -> {
        stream.write(146)
        writeValue(stream, value.toList())
      }
      is NativeFinvuConfig -> {
        stream.write(147)
        writeValue(stream, value.toList())
      }
      is NativeHandleInfo -> {
        stream.write(148)
        writeValue(stream, value.toList())
      }
      is NativeLinkedAccountDetailsInfo -> {
        stream.write(149)
        writeValue(stream, value.toList())
      }
      is NativeLinkedAccountInfo -> {
        stream.write(150)
        writeValue(stream, value.toList())
      }
      is NativeLinkedAccountsResponse -> {
        stream.write(151)
        writeValue(stream, value.toList())
      }
      is NativeLoginOtpReference -> {
        stream.write(152)
        writeValue(stream, value.toList())
      }
      is NativeProcessConsentRequestResponse -> {
        stream.write(153)
        writeValue(stream, value.toList())
      }
      is NativeTypeIdentifier -> {
        stream.write(154)
        writeValue(stream, value.toList())
      }
      is NativeTypeIdentifierInfo -> {
        stream.write(155)
        writeValue(stream, value.toList())
      }
      is NativeUserConsentInfoDetails -> {
        stream.write(156)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface NativeFinvuManager {
  fun initialize(config: NativeFinvuConfig)
  fun connect(callback: (Result<Unit>) -> Unit)
  fun disconnect()
  fun isConnected(): Boolean
  fun hasSession(): Boolean
  fun loginWithUsernameOrMobileNumberAndConsentHandle(username: String?, mobileNumber: String?, consentHandleId: String, callback: (Result<NativeLoginOtpReference>) -> Unit)
  fun verifyLoginOtp(otp: String, otpReference: String, callback: (Result<NativeHandleInfo>) -> Unit)
  fun discoverAccountsAsync(fipId: String, fiTypes: List<String>, identifiers: List<NativeTypeIdentifierInfo>, callback: (Result<NativeDiscoveredAccountsResponse>) -> Unit)
  fun discoverAccounts(fipId: String, fiTypes: List<String>, identifiers: List<NativeTypeIdentifierInfo>, callback: (Result<NativeDiscoveredAccountsResponse>) -> Unit)
  fun linkAccounts(fipDetails: NativeFIPDetails, accounts: List<NativeDiscoveredAccountInfo>, callback: (Result<NativeAccountLinkingRequestReference>) -> Unit)
  fun confirmAccountLinking(requestReference: NativeAccountLinkingRequestReference, otp: String, callback: (Result<NativeConfirmAccountLinkingInfo>) -> Unit)
  fun fetchLinkedAccounts(callback: (Result<NativeLinkedAccountsResponse>) -> Unit)
  fun initiateMobileVerification(mobileNumber: String, callback: (Result<Unit>) -> Unit)
  fun completeMobileVerification(mobileNumber: String, otp: String, callback: (Result<Unit>) -> Unit)
  fun fipsAllFIPOptions(callback: (Result<NativeFIPSearchResponse>) -> Unit)
  fun fetchFIPDetails(fipId: String, callback: (Result<NativeFIPDetails>) -> Unit)
  fun getEntityInfo(entityId: String, entityType: String, callback: (Result<NativeEntityInfo>) -> Unit)
  fun approveConsentRequest(consentRequest: NativeConsentRequestDetailInfo, linkedAccounts: List<NativeLinkedAccountDetailsInfo>, callback: (Result<NativeProcessConsentRequestResponse>) -> Unit)
  fun denyConsentRequest(consentRequest: NativeConsentRequestDetailInfo, callback: (Result<NativeProcessConsentRequestResponse>) -> Unit)
  fun revokeConsent(consent: NativeUserConsentInfoDetails, accountAggregator: NativeAccountAggregator?, fipDetails: NativeFIPReference?, callback: (Result<Unit>) -> Unit)
  fun getConsentHandleStatus(handleId: String, callback: (Result<NativeConsentHandleStatusResponse>) -> Unit)
  fun getConsentRequestDetails(handleId: String, callback: (Result<NativeConsentRequestDetailInfo>) -> Unit)
  fun logout(callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by NativeFinvuManager. */
    val codec: MessageCodec<Any?> by lazy {
      NativeFinvuManagerCodec
    }
    /** Sets up an instance of `NativeFinvuManager` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: NativeFinvuManager?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.initialize", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val configArg = args[0] as NativeFinvuConfig
            var wrapped: List<Any?>
            try {
              api.initialize(configArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.connect", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.connect() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.disconnect", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.disconnect()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.isConnected", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.isConnected())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.hasSession", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.hasSession())
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.loginWithUsernameOrMobileNumberAndConsentHandle", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val usernameArg = args[0] as String?
            val mobileNumberArg = args[1] as String?
            val consentHandleIdArg = args[2] as String
            api.loginWithUsernameOrMobileNumberAndConsentHandle(usernameArg, mobileNumberArg, consentHandleIdArg) { result: Result<NativeLoginOtpReference> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.verifyLoginOtp", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val otpArg = args[0] as String
            val otpReferenceArg = args[1] as String
            api.verifyLoginOtp(otpArg, otpReferenceArg) { result: Result<NativeHandleInfo> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.discoverAccountsAsync", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val fipIdArg = args[0] as String
            val fiTypesArg = args[1] as List<String>
            val identifiersArg = args[2] as List<NativeTypeIdentifierInfo>
            api.discoverAccountsAsync(fipIdArg, fiTypesArg, identifiersArg) { result: Result<NativeDiscoveredAccountsResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.discoverAccounts", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val fipIdArg = args[0] as String
            val fiTypesArg = args[1] as List<String>
            val identifiersArg = args[2] as List<NativeTypeIdentifierInfo>
            api.discoverAccounts(fipIdArg, fiTypesArg, identifiersArg) { result: Result<NativeDiscoveredAccountsResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.linkAccounts", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val fipDetailsArg = args[0] as NativeFIPDetails
            val accountsArg = args[1] as List<NativeDiscoveredAccountInfo>
            api.linkAccounts(fipDetailsArg, accountsArg) { result: Result<NativeAccountLinkingRequestReference> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.confirmAccountLinking", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestReferenceArg = args[0] as NativeAccountLinkingRequestReference
            val otpArg = args[1] as String
            api.confirmAccountLinking(requestReferenceArg, otpArg) { result: Result<NativeConfirmAccountLinkingInfo> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.fetchLinkedAccounts", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.fetchLinkedAccounts() { result: Result<NativeLinkedAccountsResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.initiateMobileVerification", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val mobileNumberArg = args[0] as String
            api.initiateMobileVerification(mobileNumberArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.completeMobileVerification", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val mobileNumberArg = args[0] as String
            val otpArg = args[1] as String
            api.completeMobileVerification(mobileNumberArg, otpArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.fipsAllFIPOptions", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.fipsAllFIPOptions() { result: Result<NativeFIPSearchResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.fetchFIPDetails", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val fipIdArg = args[0] as String
            api.fetchFIPDetails(fipIdArg) { result: Result<NativeFIPDetails> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.getEntityInfo", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val entityIdArg = args[0] as String
            val entityTypeArg = args[1] as String
            api.getEntityInfo(entityIdArg, entityTypeArg) { result: Result<NativeEntityInfo> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.approveConsentRequest", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val consentRequestArg = args[0] as NativeConsentRequestDetailInfo
            val linkedAccountsArg = args[1] as List<NativeLinkedAccountDetailsInfo>
            api.approveConsentRequest(consentRequestArg, linkedAccountsArg) { result: Result<NativeProcessConsentRequestResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.denyConsentRequest", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val consentRequestArg = args[0] as NativeConsentRequestDetailInfo
            api.denyConsentRequest(consentRequestArg) { result: Result<NativeProcessConsentRequestResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.revokeConsent", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val consentArg = args[0] as NativeUserConsentInfoDetails
            val accountAggregatorArg = args[1] as NativeAccountAggregator?
            val fipDetailsArg = args[2] as NativeFIPReference?
            api.revokeConsent(consentArg, accountAggregatorArg, fipDetailsArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.getConsentHandleStatus", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleIdArg = args[0] as String
            api.getConsentHandleStatus(handleIdArg) { result: Result<NativeConsentHandleStatusResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.getConsentRequestDetails", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val handleIdArg = args[0] as String
            api.getConsentRequestDetails(handleIdArg) { result: Result<NativeConsentRequestDetailInfo> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk.NativeFinvuManager.logout", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.logout() { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
