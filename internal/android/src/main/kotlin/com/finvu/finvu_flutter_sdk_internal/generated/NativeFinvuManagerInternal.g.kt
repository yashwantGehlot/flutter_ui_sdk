// Autogenerated from Pigeon (v14.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon


import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is NativeFinvuErrorInternal) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class NativeFinvuErrorInternal (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeForgotHandleInternal (
  val userIds: List<String?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeForgotHandleInternal {
      val userIds = list[0] as List<String?>
      return NativeForgotHandleInternal(userIds)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      userIds,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeLoginResponse (
  val deviceBindingValid: Boolean? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeLoginResponse {
      val deviceBindingValid = list[0] as Boolean?
      return NativeLoginResponse(deviceBindingValid)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      deviceBindingValid,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeDeviceBindingResponse (
  val secret: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeDeviceBindingResponse {
      val secret = list[0] as String?
      return NativeDeviceBindingResponse(secret)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      secret,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeUserInfoInternal (
  val userId: String,
  val mobileNumber: String,
  val emailId: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeUserInfoInternal {
      val userId = list[0] as String
      val mobileNumber = list[1] as String
      val emailId = list[2] as String
      return NativeUserInfoInternal(userId, mobileNumber, emailId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      userId,
      mobileNumber,
      emailId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeLinkedAccountDetailsInfoInternal (
  val userId: String,
  val fipId: String,
  val fipName: String,
  val maskedAccountNumber: String,
  val accountReferenceNumber: String,
  val linkReferenceNumber: String,
  val consentIdList: List<String?>? = null,
  val fiType: String,
  val accountType: String,
  val linkedAccountUpdateTimestamp: String? = null,
  val authenticatorType: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeLinkedAccountDetailsInfoInternal {
      val userId = list[0] as String
      val fipId = list[1] as String
      val fipName = list[2] as String
      val maskedAccountNumber = list[3] as String
      val accountReferenceNumber = list[4] as String
      val linkReferenceNumber = list[5] as String
      val consentIdList = list[6] as List<String?>?
      val fiType = list[7] as String
      val accountType = list[8] as String
      val linkedAccountUpdateTimestamp = list[9] as String?
      val authenticatorType = list[10] as String
      return NativeLinkedAccountDetailsInfoInternal(userId, fipId, fipName, maskedAccountNumber, accountReferenceNumber, linkReferenceNumber, consentIdList, fiType, accountType, linkedAccountUpdateTimestamp, authenticatorType)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      userId,
      fipId,
      fipName,
      maskedAccountNumber,
      accountReferenceNumber,
      linkReferenceNumber,
      consentIdList,
      fiType,
      accountType,
      linkedAccountUpdateTimestamp,
      authenticatorType,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeUserConsentInfoInternal (
  val consentIntentId: String,
  val consentIntentEntityId: String? = null,
  val consentIntentEntityName: String,
  val consentIdList: List<String?>,
  val consentIntentUpdateTimestamp: String,
  val consentPurposeText: String,
  val status: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeUserConsentInfoInternal {
      val consentIntentId = list[0] as String
      val consentIntentEntityId = list[1] as String?
      val consentIntentEntityName = list[2] as String
      val consentIdList = list[3] as List<String?>
      val consentIntentUpdateTimestamp = list[4] as String
      val consentPurposeText = list[5] as String
      val status = list[6] as String?
      return NativeUserConsentInfoInternal(consentIntentId, consentIntentEntityId, consentIntentEntityName, consentIdList, consentIntentUpdateTimestamp, consentPurposeText, status)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      consentIntentId,
      consentIntentEntityId,
      consentIntentEntityName,
      consentIdList,
      consentIntentUpdateTimestamp,
      consentPurposeText,
      status,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeUserConsentResponseInternal (
  val userConsents: List<NativeUserConsentInfoInternal?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeUserConsentResponseInternal {
      val userConsents = list[0] as List<NativeUserConsentInfoInternal?>
      return NativeUserConsentResponseInternal(userConsents)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      userConsents,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeFinancialInformationEntityInternal (
  val id: String,
  val name: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeFinancialInformationEntityInternal {
      val id = list[0] as String
      val name = list[1] as String
      return NativeFinancialInformationEntityInternal(id, name)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
      name,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeConsentPurposeInfoInternal (
  val code: String,
  val text: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeConsentPurposeInfoInternal {
      val code = list[0] as String
      val text = list[1] as String
      return NativeConsentPurposeInfoInternal(code, text)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      code,
      text,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeDateTimeRangeInternal (
  val from: String,
  val to: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeDateTimeRangeInternal {
      val from = list[0] as String
      val to = list[1] as String
      return NativeDateTimeRangeInternal(from, to)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      from,
      to,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeConsentDataFrequencyInternal (
  val unit: String,
  val value: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeConsentDataFrequencyInternal {
      val unit = list[0] as String
      val value = list[1] as Double
      return NativeConsentDataFrequencyInternal(unit, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      unit,
      value,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeConsentDataLifePeriodInternal (
  val unit: String,
  val value: Double

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeConsentDataLifePeriodInternal {
      val unit = list[0] as String
      val value = list[1] as Double
      return NativeConsentDataLifePeriodInternal(unit, value)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      unit,
      value,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeConsentAccountDetailsInternal (
  val fiType: String,
  val fipId: String,
  val accountType: String,
  val accountReferenceNumber: String? = null,
  val maskedAccountNumber: String,
  val linkReferenceNumber: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeConsentAccountDetailsInternal {
      val fiType = list[0] as String
      val fipId = list[1] as String
      val accountType = list[2] as String
      val accountReferenceNumber = list[3] as String?
      val maskedAccountNumber = list[4] as String
      val linkReferenceNumber = list[5] as String
      return NativeConsentAccountDetailsInternal(fiType, fipId, accountType, accountReferenceNumber, maskedAccountNumber, linkReferenceNumber)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      fiType,
      fipId,
      accountType,
      accountReferenceNumber,
      maskedAccountNumber,
      linkReferenceNumber,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeConsentInfoDetailsInternal (
  val consentHandle: String? = null,
  val consentId: String? = null,
  val consentStatus: String,
  val financialInformationProvider: NativeFinancialInformationEntityInternal? = null,
  val financialInformationUser: NativeFinancialInformationEntityInternal? = null,
  val consentPurpose: NativeConsentPurposeInfoInternal,
  val consentDisplayDescriptions: List<String?>,
  val dataDateTimeRange: NativeDateTimeRangeInternal,
  val consentDateTimeRange: NativeDateTimeRangeInternal,
  val consentDataLifePeriod: NativeConsentDataLifePeriodInternal,
  val consentDataFrequency: NativeConsentDataFrequencyInternal,
  val accounts: List<NativeConsentAccountDetailsInternal?>,
  val fiTypes: List<String?>? = null,
  val accountAggregator: NativeAccountAggregatorInternal? = null,
  val statusLastUpdateTimestamp: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeConsentInfoDetailsInternal {
      val consentHandle = list[0] as String?
      val consentId = list[1] as String?
      val consentStatus = list[2] as String
      val financialInformationProvider: NativeFinancialInformationEntityInternal? = (list[3] as List<Any?>?)?.let {
        NativeFinancialInformationEntityInternal.fromList(it)
      }
      val financialInformationUser: NativeFinancialInformationEntityInternal? = (list[4] as List<Any?>?)?.let {
        NativeFinancialInformationEntityInternal.fromList(it)
      }
      val consentPurpose = NativeConsentPurposeInfoInternal.fromList(list[5] as List<Any?>)
      val consentDisplayDescriptions = list[6] as List<String?>
      val dataDateTimeRange = NativeDateTimeRangeInternal.fromList(list[7] as List<Any?>)
      val consentDateTimeRange = NativeDateTimeRangeInternal.fromList(list[8] as List<Any?>)
      val consentDataLifePeriod = NativeConsentDataLifePeriodInternal.fromList(list[9] as List<Any?>)
      val consentDataFrequency = NativeConsentDataFrequencyInternal.fromList(list[10] as List<Any?>)
      val accounts = list[11] as List<NativeConsentAccountDetailsInternal?>
      val fiTypes = list[12] as List<String?>?
      val accountAggregator: NativeAccountAggregatorInternal? = (list[13] as List<Any?>?)?.let {
        NativeAccountAggregatorInternal.fromList(it)
      }
      val statusLastUpdateTimestamp = list[14] as String?
      return NativeConsentInfoDetailsInternal(consentHandle, consentId, consentStatus, financialInformationProvider, financialInformationUser, consentPurpose, consentDisplayDescriptions, dataDateTimeRange, consentDateTimeRange, consentDataLifePeriod, consentDataFrequency, accounts, fiTypes, accountAggregator, statusLastUpdateTimestamp)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      consentHandle,
      consentId,
      consentStatus,
      financialInformationProvider?.toList(),
      financialInformationUser?.toList(),
      consentPurpose.toList(),
      consentDisplayDescriptions,
      dataDateTimeRange.toList(),
      consentDateTimeRange.toList(),
      consentDataLifePeriod.toList(),
      consentDataFrequency.toList(),
      accounts,
      fiTypes,
      accountAggregator?.toList(),
      statusLastUpdateTimestamp,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAccountAggregatorInternal (
  val id: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeAccountAggregatorInternal {
      val id = list[0] as String
      return NativeAccountAggregatorInternal(id)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      id,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeFetchOfflineMessageResponseInternal (
  val offlineMessageInfo: List<NativeOfflineMessageInfoInternal?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeFetchOfflineMessageResponseInternal {
      val offlineMessageInfo = list[0] as List<NativeOfflineMessageInfoInternal?>
      return NativeFetchOfflineMessageResponseInternal(offlineMessageInfo)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      offlineMessageInfo,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeOfflineMessageInfoInternal (
  val userId: String,
  val messageId: String,
  val messageAcked: String,
  val messageOriginator: String,
  val messageOriginatorName: String? = null,
  val messageText: String,
  val messageTimestamp: String,
  val messageType: String,
  val requestConsentId: String,
  val requestSessionId: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeOfflineMessageInfoInternal {
      val userId = list[0] as String
      val messageId = list[1] as String
      val messageAcked = list[2] as String
      val messageOriginator = list[3] as String
      val messageOriginatorName = list[4] as String?
      val messageText = list[5] as String
      val messageTimestamp = list[6] as String
      val messageType = list[7] as String
      val requestConsentId = list[8] as String
      val requestSessionId = list[9] as String?
      return NativeOfflineMessageInfoInternal(userId, messageId, messageAcked, messageOriginator, messageOriginatorName, messageText, messageTimestamp, messageType, requestConsentId, requestSessionId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      userId,
      messageId,
      messageAcked,
      messageOriginator,
      messageOriginatorName,
      messageText,
      messageTimestamp,
      messageType,
      requestConsentId,
      requestSessionId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeConsentReportInternal (
  val report: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeConsentReportInternal {
      val report = list[0] as String
      return NativeConsentReportInternal(report)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      report,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativePendingConsentRequestsResponseInternal (
  val details: List<NativeConsentRequestDetailInfoInternal?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativePendingConsentRequestsResponseInternal {
      val details = list[0] as List<NativeConsentRequestDetailInfoInternal?>
      return NativePendingConsentRequestsResponseInternal(details)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      details,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeConsentRequestDetailInfoInternal (
  val consentHandleId: String,
  val consentId: String? = null,
  val financialInformationUser: NativeFinancialInformationEntityInternal,
  val consentPurposeInfo: NativeConsentPurposeInfoInternal,
  val consentDisplayDescriptions: List<String?>,
  val dataDateTimeRange: NativeDateTimeRangeInternal,
  val consentDateTimeRange: NativeDateTimeRangeInternal,
  val consentDataFrequency: NativeConsentDataFrequencyInternal,
  val consentDataLifePeriod: NativeConsentDataLifePeriodInternal,
  val fiTypes: List<String?>? = null,
  val statusLastUpdateTimestamp: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeConsentRequestDetailInfoInternal {
      val consentHandleId = list[0] as String
      val consentId = list[1] as String?
      val financialInformationUser = NativeFinancialInformationEntityInternal.fromList(list[2] as List<Any?>)
      val consentPurposeInfo = NativeConsentPurposeInfoInternal.fromList(list[3] as List<Any?>)
      val consentDisplayDescriptions = list[4] as List<String?>
      val dataDateTimeRange = NativeDateTimeRangeInternal.fromList(list[5] as List<Any?>)
      val consentDateTimeRange = NativeDateTimeRangeInternal.fromList(list[6] as List<Any?>)
      val consentDataFrequency = NativeConsentDataFrequencyInternal.fromList(list[7] as List<Any?>)
      val consentDataLifePeriod = NativeConsentDataLifePeriodInternal.fromList(list[8] as List<Any?>)
      val fiTypes = list[9] as List<String?>?
      val statusLastUpdateTimestamp = list[10] as String?
      return NativeConsentRequestDetailInfoInternal(consentHandleId, consentId, financialInformationUser, consentPurposeInfo, consentDisplayDescriptions, dataDateTimeRange, consentDateTimeRange, consentDataFrequency, consentDataLifePeriod, fiTypes, statusLastUpdateTimestamp)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      consentHandleId,
      consentId,
      financialInformationUser.toList(),
      consentPurposeInfo.toList(),
      consentDisplayDescriptions,
      dataDateTimeRange.toList(),
      consentDateTimeRange.toList(),
      consentDataFrequency.toList(),
      consentDataLifePeriod.toList(),
      fiTypes,
      statusLastUpdateTimestamp,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeSelfConsentRequestInternal (
  val createTime: String,
  val startTime: String,
  val expireTime: String,
  val linkedAccounts: List<NativeLinkedAccountDetailsInfoInternal?>,
  val consentTypes: List<String?>,
  val consentFiTypes: List<String?>,
  val mode: String,
  val fetchType: String,
  val frequency: NativeConsentDataFrequencyInternal,
  val dataLife: NativeConsentDataLifePeriodInternal,
  val purposeText: String,
  val purposeType: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeSelfConsentRequestInternal {
      val createTime = list[0] as String
      val startTime = list[1] as String
      val expireTime = list[2] as String
      val linkedAccounts = list[3] as List<NativeLinkedAccountDetailsInfoInternal?>
      val consentTypes = list[4] as List<String?>
      val consentFiTypes = list[5] as List<String?>
      val mode = list[6] as String
      val fetchType = list[7] as String
      val frequency = NativeConsentDataFrequencyInternal.fromList(list[8] as List<Any?>)
      val dataLife = NativeConsentDataLifePeriodInternal.fromList(list[9] as List<Any?>)
      val purposeText = list[10] as String
      val purposeType = list[11] as String
      return NativeSelfConsentRequestInternal(createTime, startTime, expireTime, linkedAccounts, consentTypes, consentFiTypes, mode, fetchType, frequency, dataLife, purposeText, purposeType)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      createTime,
      startTime,
      expireTime,
      linkedAccounts,
      consentTypes,
      consentFiTypes,
      mode,
      fetchType,
      frequency.toList(),
      dataLife.toList(),
      purposeText,
      purposeType,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeConsentHistoryInternal (
  val consentId: String,
  val consentTimestamp: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeConsentHistoryInternal {
      val consentId = list[0] as String
      val consentTimestamp = list[1] as String?
      return NativeConsentHistoryInternal(consentId, consentTimestamp)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      consentId,
      consentTimestamp,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAccountDataInternal (
  val consentId: String? = null,
  val timestamp: String? = null,
  val sessionId: String? = null,
  val transactionId: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeAccountDataInternal {
      val consentId = list[0] as String?
      val timestamp = list[1] as String?
      val sessionId = list[2] as String?
      val transactionId = list[3] as String?
      return NativeAccountDataInternal(consentId, timestamp, sessionId, transactionId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      consentId,
      timestamp,
      sessionId,
      transactionId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAccountDataFetchInternal (
  val fipId: String,
  val decryptedInfo: List<NativeFIDecryptedDataInfoInternal?>

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeAccountDataFetchInternal {
      val fipId = list[0] as String
      val decryptedInfo = list[1] as List<NativeFIDecryptedDataInfoInternal?>
      return NativeAccountDataFetchInternal(fipId, decryptedInfo)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      fipId,
      decryptedInfo,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeFIDecryptedDataInfoInternal (
  val linkReferenceNumber: String,
  val accountReferenceNumber: String? = null,
  val maskedAccountNumber: String,
  val fiType: String? = null,
  val accountType: String? = null,
  val decryptedData: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeFIDecryptedDataInfoInternal {
      val linkReferenceNumber = list[0] as String
      val accountReferenceNumber = list[1] as String?
      val maskedAccountNumber = list[2] as String
      val fiType = list[3] as String?
      val accountType = list[4] as String?
      val decryptedData = list[5] as String
      return NativeFIDecryptedDataInfoInternal(linkReferenceNumber, accountReferenceNumber, maskedAccountNumber, fiType, accountType, decryptedData)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      linkReferenceNumber,
      accountReferenceNumber,
      maskedAccountNumber,
      fiType,
      accountType,
      decryptedData,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeConsentHistoryResponseInternal (
  val consentHistory: List<NativeConsentHistoryInternal?>? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): NativeConsentHistoryResponseInternal {
      val consentHistory = list[0] as List<NativeConsentHistoryInternal?>?
      return NativeConsentHistoryResponseInternal(consentHistory)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      consentHistory,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object NativeFinvuManagerInternalCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAccountAggregatorInternal.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAccountDataFetchInternal.fromList(it)
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAccountDataInternal.fromList(it)
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeConsentAccountDetailsInternal.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeConsentDataFrequencyInternal.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeConsentDataLifePeriodInternal.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeConsentHistoryInternal.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeConsentHistoryResponseInternal.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeConsentInfoDetailsInternal.fromList(it)
        }
      }
      137.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeConsentPurposeInfoInternal.fromList(it)
        }
      }
      138.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeConsentReportInternal.fromList(it)
        }
      }
      139.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeConsentRequestDetailInfoInternal.fromList(it)
        }
      }
      140.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeDateTimeRangeInternal.fromList(it)
        }
      }
      141.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeDeviceBindingResponse.fromList(it)
        }
      }
      142.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeFIDecryptedDataInfoInternal.fromList(it)
        }
      }
      143.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeFetchOfflineMessageResponseInternal.fromList(it)
        }
      }
      144.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeFinancialInformationEntityInternal.fromList(it)
        }
      }
      145.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeFinancialInformationEntityInternal.fromList(it)
        }
      }
      146.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeForgotHandleInternal.fromList(it)
        }
      }
      147.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeLinkedAccountDetailsInfoInternal.fromList(it)
        }
      }
      148.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeLoginResponse.fromList(it)
        }
      }
      149.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeOfflineMessageInfoInternal.fromList(it)
        }
      }
      150.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativePendingConsentRequestsResponseInternal.fromList(it)
        }
      }
      151.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeSelfConsentRequestInternal.fromList(it)
        }
      }
      152.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserConsentInfoInternal.fromList(it)
        }
      }
      153.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserConsentResponseInternal.fromList(it)
        }
      }
      154.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeUserInfoInternal.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NativeAccountAggregatorInternal -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is NativeAccountDataFetchInternal -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      is NativeAccountDataInternal -> {
        stream.write(130)
        writeValue(stream, value.toList())
      }
      is NativeConsentAccountDetailsInternal -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is NativeConsentDataFrequencyInternal -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is NativeConsentDataLifePeriodInternal -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is NativeConsentHistoryInternal -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is NativeConsentHistoryResponseInternal -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is NativeConsentInfoDetailsInternal -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      is NativeConsentPurposeInfoInternal -> {
        stream.write(137)
        writeValue(stream, value.toList())
      }
      is NativeConsentReportInternal -> {
        stream.write(138)
        writeValue(stream, value.toList())
      }
      is NativeConsentRequestDetailInfoInternal -> {
        stream.write(139)
        writeValue(stream, value.toList())
      }
      is NativeDateTimeRangeInternal -> {
        stream.write(140)
        writeValue(stream, value.toList())
      }
      is NativeDeviceBindingResponse -> {
        stream.write(141)
        writeValue(stream, value.toList())
      }
      is NativeFIDecryptedDataInfoInternal -> {
        stream.write(142)
        writeValue(stream, value.toList())
      }
      is NativeFetchOfflineMessageResponseInternal -> {
        stream.write(143)
        writeValue(stream, value.toList())
      }
      is NativeFinancialInformationEntityInternal -> {
        stream.write(144)
        writeValue(stream, value.toList())
      }
      is NativeFinancialInformationEntityInternal -> {
        stream.write(145)
        writeValue(stream, value.toList())
      }
      is NativeForgotHandleInternal -> {
        stream.write(146)
        writeValue(stream, value.toList())
      }
      is NativeLinkedAccountDetailsInfoInternal -> {
        stream.write(147)
        writeValue(stream, value.toList())
      }
      is NativeLoginResponse -> {
        stream.write(148)
        writeValue(stream, value.toList())
      }
      is NativeOfflineMessageInfoInternal -> {
        stream.write(149)
        writeValue(stream, value.toList())
      }
      is NativePendingConsentRequestsResponseInternal -> {
        stream.write(150)
        writeValue(stream, value.toList())
      }
      is NativeSelfConsentRequestInternal -> {
        stream.write(151)
        writeValue(stream, value.toList())
      }
      is NativeUserConsentInfoInternal -> {
        stream.write(152)
        writeValue(stream, value.toList())
      }
      is NativeUserConsentResponseInternal -> {
        stream.write(153)
        writeValue(stream, value.toList())
      }
      is NativeUserInfoInternal -> {
        stream.write(154)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface NativeFinvuManagerInternal {
  fun loginWithUsernameAndPasscode(username: String, passcode: String, totp: String?, deviceId: String?, callback: (Result<NativeLoginResponse>) -> Unit)
  fun deviceBinding(otpLessToken: String, deviceId: String, osType: String, osVersion: String, appId: String, appVersion: String, simSerialNumber: String?, callback: (Result<NativeDeviceBindingResponse>) -> Unit)
  fun initiateForgotPasscodeRequest(username: String, mobileNumber: String, callback: (Result<Unit>) -> Unit)
  fun verifyForgotPasscodeOTP(username: String, mobileNumber: String, otp: String, newPasscode: String, callback: (Result<Unit>) -> Unit)
  fun initiateForgotHandleRequest(mobileNumber: String, callback: (Result<Unit>) -> Unit)
  fun verifyForgotHandleOTP(otp: String, callback: (Result<NativeForgotHandleInternal>) -> Unit)
  fun register(username: String, mobileNumber: String, passcode: String, callback: (Result<Unit>) -> Unit)
  fun fetchUserInfo(callback: (Result<NativeUserInfoInternal>) -> Unit)
  fun unlinkAccount(account: NativeLinkedAccountDetailsInfoInternal, callback: (Result<Unit>) -> Unit)
  fun getUserConsents(callback: (Result<NativeUserConsentResponseInternal>) -> Unit)
  fun getUserConsentDetails(consent: NativeUserConsentInfoInternal, callback: (Result<NativeConsentInfoDetailsInternal>) -> Unit)
  fun fetchOfflineMessages(callback: (Result<NativeFetchOfflineMessageResponseInternal>) -> Unit)
  fun closeFinvuAccount(password: String, callback: (Result<Unit>) -> Unit)
  fun changePasscode(currentPasscode: String, newPasscode: String, callback: (Result<Unit>) -> Unit)
  fun getUserConsentReport(callback: (Result<NativeConsentReportInternal>) -> Unit)
  fun fetchPendingConsentRequests(callback: (Result<NativePendingConsentRequestsResponseInternal>) -> Unit)
  fun getUserConsentDetailsForId(consentId: String, callback: (Result<NativeConsentInfoDetailsInternal>) -> Unit)
  fun getConsentHistory(consentId: String, callback: (Result<NativeConsentHistoryResponseInternal>) -> Unit)
  fun initiateAccountDataRequest(from: String, to: String, consentId: String, publicKeyExpiry: String, callback: (Result<NativeAccountDataInternal>) -> Unit)
  fun requestSelfConsent(request: NativeSelfConsentRequestInternal, callback: (Result<Unit>) -> Unit)
  fun fetchAccountData(sessionId: String, consentId: String, callback: (Result<NativeAccountDataFetchInternal>) -> Unit)

  companion object {
    /** The codec used by NativeFinvuManagerInternal. */
    val codec: MessageCodec<Any?> by lazy {
      NativeFinvuManagerInternalCodec
    }
    /** Sets up an instance of `NativeFinvuManagerInternal` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: NativeFinvuManagerInternal?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.loginWithUsernameAndPasscode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val usernameArg = args[0] as String
            val passcodeArg = args[1] as String
            val totpArg = args[2] as String?
            val deviceIdArg = args[3] as String?
            api.loginWithUsernameAndPasscode(usernameArg, passcodeArg, totpArg, deviceIdArg) { result: Result<NativeLoginResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.deviceBinding", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val otpLessTokenArg = args[0] as String
            val deviceIdArg = args[1] as String
            val osTypeArg = args[2] as String
            val osVersionArg = args[3] as String
            val appIdArg = args[4] as String
            val appVersionArg = args[5] as String
            val simSerialNumberArg = args[6] as String?
            api.deviceBinding(otpLessTokenArg, deviceIdArg, osTypeArg, osVersionArg, appIdArg, appVersionArg, simSerialNumberArg) { result: Result<NativeDeviceBindingResponse> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.initiateForgotPasscodeRequest", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val usernameArg = args[0] as String
            val mobileNumberArg = args[1] as String
            api.initiateForgotPasscodeRequest(usernameArg, mobileNumberArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.verifyForgotPasscodeOTP", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val usernameArg = args[0] as String
            val mobileNumberArg = args[1] as String
            val otpArg = args[2] as String
            val newPasscodeArg = args[3] as String
            api.verifyForgotPasscodeOTP(usernameArg, mobileNumberArg, otpArg, newPasscodeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.initiateForgotHandleRequest", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val mobileNumberArg = args[0] as String
            api.initiateForgotHandleRequest(mobileNumberArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.verifyForgotHandleOTP", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val otpArg = args[0] as String
            api.verifyForgotHandleOTP(otpArg) { result: Result<NativeForgotHandleInternal> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.register", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val usernameArg = args[0] as String
            val mobileNumberArg = args[1] as String
            val passcodeArg = args[2] as String
            api.register(usernameArg, mobileNumberArg, passcodeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.fetchUserInfo", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.fetchUserInfo() { result: Result<NativeUserInfoInternal> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.unlinkAccount", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val accountArg = args[0] as NativeLinkedAccountDetailsInfoInternal
            api.unlinkAccount(accountArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.getUserConsents", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getUserConsents() { result: Result<NativeUserConsentResponseInternal> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.getUserConsentDetails", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val consentArg = args[0] as NativeUserConsentInfoInternal
            api.getUserConsentDetails(consentArg) { result: Result<NativeConsentInfoDetailsInternal> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.fetchOfflineMessages", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.fetchOfflineMessages() { result: Result<NativeFetchOfflineMessageResponseInternal> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.closeFinvuAccount", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val passwordArg = args[0] as String
            api.closeFinvuAccount(passwordArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.changePasscode", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val currentPasscodeArg = args[0] as String
            val newPasscodeArg = args[1] as String
            api.changePasscode(currentPasscodeArg, newPasscodeArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.getUserConsentReport", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.getUserConsentReport() { result: Result<NativeConsentReportInternal> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.fetchPendingConsentRequests", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.fetchPendingConsentRequests() { result: Result<NativePendingConsentRequestsResponseInternal> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.getUserConsentDetailsForId", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val consentIdArg = args[0] as String
            api.getUserConsentDetailsForId(consentIdArg) { result: Result<NativeConsentInfoDetailsInternal> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.getConsentHistory", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val consentIdArg = args[0] as String
            api.getConsentHistory(consentIdArg) { result: Result<NativeConsentHistoryResponseInternal> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.initiateAccountDataRequest", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val fromArg = args[0] as String
            val toArg = args[1] as String
            val consentIdArg = args[2] as String
            val publicKeyExpiryArg = args[3] as String
            api.initiateAccountDataRequest(fromArg, toArg, consentIdArg, publicKeyExpiryArg) { result: Result<NativeAccountDataInternal> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.requestSelfConsent", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val requestArg = args[0] as NativeSelfConsentRequestInternal
            api.requestSelfConsent(requestArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                reply.reply(wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.fetchAccountData", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val sessionIdArg = args[0] as String
            val consentIdArg = args[1] as String
            api.fetchAccountData(sessionIdArg, consentIdArg) { result: Result<NativeAccountDataFetchInternal> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
