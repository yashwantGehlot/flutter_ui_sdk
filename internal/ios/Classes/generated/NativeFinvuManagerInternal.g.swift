// Autogenerated from Pigeon (v14.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeForgotHandleInternal {
  var userIds: [String?]

  static func fromList(_ list: [Any?]) -> NativeForgotHandleInternal? {
    let userIds = list[0] as! [String?]

    return NativeForgotHandleInternal(
      userIds: userIds
    )
  }
  func toList() -> [Any?] {
    return [
      userIds,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeLoginResponse {
  var deviceBindingValid: Bool? = nil

  static func fromList(_ list: [Any?]) -> NativeLoginResponse? {
    let deviceBindingValid: Bool? = nilOrValue(list[0])

    return NativeLoginResponse(
      deviceBindingValid: deviceBindingValid
    )
  }
  func toList() -> [Any?] {
    return [
      deviceBindingValid,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeDeviceBindingResponse {
  var secret: String? = nil

  static func fromList(_ list: [Any?]) -> NativeDeviceBindingResponse? {
    let secret: String? = nilOrValue(list[0])

    return NativeDeviceBindingResponse(
      secret: secret
    )
  }
  func toList() -> [Any?] {
    return [
      secret,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeUserInfoInternal {
  var userId: String
  var mobileNumber: String
  var emailId: String

  static func fromList(_ list: [Any?]) -> NativeUserInfoInternal? {
    let userId = list[0] as! String
    let mobileNumber = list[1] as! String
    let emailId = list[2] as! String

    return NativeUserInfoInternal(
      userId: userId,
      mobileNumber: mobileNumber,
      emailId: emailId
    )
  }
  func toList() -> [Any?] {
    return [
      userId,
      mobileNumber,
      emailId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeLinkedAccountDetailsInfoInternal {
  var userId: String
  var fipId: String
  var fipName: String
  var maskedAccountNumber: String
  var accountReferenceNumber: String
  var linkReferenceNumber: String
  var consentIdList: [String?]? = nil
  var fiType: String
  var accountType: String
  var linkedAccountUpdateTimestamp: String? = nil
  var authenticatorType: String

  static func fromList(_ list: [Any?]) -> NativeLinkedAccountDetailsInfoInternal? {
    let userId = list[0] as! String
    let fipId = list[1] as! String
    let fipName = list[2] as! String
    let maskedAccountNumber = list[3] as! String
    let accountReferenceNumber = list[4] as! String
    let linkReferenceNumber = list[5] as! String
    let consentIdList: [String?]? = nilOrValue(list[6])
    let fiType = list[7] as! String
    let accountType = list[8] as! String
    let linkedAccountUpdateTimestamp: String? = nilOrValue(list[9])
    let authenticatorType = list[10] as! String

    return NativeLinkedAccountDetailsInfoInternal(
      userId: userId,
      fipId: fipId,
      fipName: fipName,
      maskedAccountNumber: maskedAccountNumber,
      accountReferenceNumber: accountReferenceNumber,
      linkReferenceNumber: linkReferenceNumber,
      consentIdList: consentIdList,
      fiType: fiType,
      accountType: accountType,
      linkedAccountUpdateTimestamp: linkedAccountUpdateTimestamp,
      authenticatorType: authenticatorType
    )
  }
  func toList() -> [Any?] {
    return [
      userId,
      fipId,
      fipName,
      maskedAccountNumber,
      accountReferenceNumber,
      linkReferenceNumber,
      consentIdList,
      fiType,
      accountType,
      linkedAccountUpdateTimestamp,
      authenticatorType,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeUserConsentInfoInternal {
  var consentIntentId: String
  var consentIntentEntityId: String? = nil
  var consentIntentEntityName: String
  var consentIdList: [String?]
  var consentIntentUpdateTimestamp: String
  var consentPurposeText: String
  var status: String? = nil

  static func fromList(_ list: [Any?]) -> NativeUserConsentInfoInternal? {
    let consentIntentId = list[0] as! String
    let consentIntentEntityId: String? = nilOrValue(list[1])
    let consentIntentEntityName = list[2] as! String
    let consentIdList = list[3] as! [String?]
    let consentIntentUpdateTimestamp = list[4] as! String
    let consentPurposeText = list[5] as! String
    let status: String? = nilOrValue(list[6])

    return NativeUserConsentInfoInternal(
      consentIntentId: consentIntentId,
      consentIntentEntityId: consentIntentEntityId,
      consentIntentEntityName: consentIntentEntityName,
      consentIdList: consentIdList,
      consentIntentUpdateTimestamp: consentIntentUpdateTimestamp,
      consentPurposeText: consentPurposeText,
      status: status
    )
  }
  func toList() -> [Any?] {
    return [
      consentIntentId,
      consentIntentEntityId,
      consentIntentEntityName,
      consentIdList,
      consentIntentUpdateTimestamp,
      consentPurposeText,
      status,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeUserConsentResponseInternal {
  var userConsents: [NativeUserConsentInfoInternal?]

  static func fromList(_ list: [Any?]) -> NativeUserConsentResponseInternal? {
    let userConsents = list[0] as! [NativeUserConsentInfoInternal?]

    return NativeUserConsentResponseInternal(
      userConsents: userConsents
    )
  }
  func toList() -> [Any?] {
    return [
      userConsents,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeFinancialInformationEntityInternal {
  var id: String
  var name: String

  static func fromList(_ list: [Any?]) -> NativeFinancialInformationEntityInternal? {
    let id = list[0] as! String
    let name = list[1] as! String

    return NativeFinancialInformationEntityInternal(
      id: id,
      name: name
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      name,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeConsentPurposeInfoInternal {
  var code: String
  var text: String

  static func fromList(_ list: [Any?]) -> NativeConsentPurposeInfoInternal? {
    let code = list[0] as! String
    let text = list[1] as! String

    return NativeConsentPurposeInfoInternal(
      code: code,
      text: text
    )
  }
  func toList() -> [Any?] {
    return [
      code,
      text,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeDateTimeRangeInternal {
  var from: String
  var to: String

  static func fromList(_ list: [Any?]) -> NativeDateTimeRangeInternal? {
    let from = list[0] as! String
    let to = list[1] as! String

    return NativeDateTimeRangeInternal(
      from: from,
      to: to
    )
  }
  func toList() -> [Any?] {
    return [
      from,
      to,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeConsentDataFrequencyInternal {
  var unit: String
  var value: Double

  static func fromList(_ list: [Any?]) -> NativeConsentDataFrequencyInternal? {
    let unit = list[0] as! String
    let value = list[1] as! Double

    return NativeConsentDataFrequencyInternal(
      unit: unit,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      unit,
      value,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeConsentDataLifePeriodInternal {
  var unit: String
  var value: Double

  static func fromList(_ list: [Any?]) -> NativeConsentDataLifePeriodInternal? {
    let unit = list[0] as! String
    let value = list[1] as! Double

    return NativeConsentDataLifePeriodInternal(
      unit: unit,
      value: value
    )
  }
  func toList() -> [Any?] {
    return [
      unit,
      value,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeConsentAccountDetailsInternal {
  var fiType: String
  var fipId: String
  var accountType: String
  var accountReferenceNumber: String? = nil
  var maskedAccountNumber: String
  var linkReferenceNumber: String

  static func fromList(_ list: [Any?]) -> NativeConsentAccountDetailsInternal? {
    let fiType = list[0] as! String
    let fipId = list[1] as! String
    let accountType = list[2] as! String
    let accountReferenceNumber: String? = nilOrValue(list[3])
    let maskedAccountNumber = list[4] as! String
    let linkReferenceNumber = list[5] as! String

    return NativeConsentAccountDetailsInternal(
      fiType: fiType,
      fipId: fipId,
      accountType: accountType,
      accountReferenceNumber: accountReferenceNumber,
      maskedAccountNumber: maskedAccountNumber,
      linkReferenceNumber: linkReferenceNumber
    )
  }
  func toList() -> [Any?] {
    return [
      fiType,
      fipId,
      accountType,
      accountReferenceNumber,
      maskedAccountNumber,
      linkReferenceNumber,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeConsentInfoDetailsInternal {
  var consentHandle: String? = nil
  var consentId: String? = nil
  var consentStatus: String
  var financialInformationProvider: NativeFinancialInformationEntityInternal? = nil
  var financialInformationUser: NativeFinancialInformationEntityInternal? = nil
  var consentPurpose: NativeConsentPurposeInfoInternal
  var consentDisplayDescriptions: [String?]
  var dataDateTimeRange: NativeDateTimeRangeInternal
  var consentDateTimeRange: NativeDateTimeRangeInternal
  var consentDataLifePeriod: NativeConsentDataLifePeriodInternal
  var consentDataFrequency: NativeConsentDataFrequencyInternal
  var accounts: [NativeConsentAccountDetailsInternal?]
  var fiTypes: [String?]? = nil
  var accountAggregator: NativeAccountAggregatorInternal? = nil
  var statusLastUpdateTimestamp: String? = nil

  static func fromList(_ list: [Any?]) -> NativeConsentInfoDetailsInternal? {
    let consentHandle: String? = nilOrValue(list[0])
    let consentId: String? = nilOrValue(list[1])
    let consentStatus = list[2] as! String
    var financialInformationProvider: NativeFinancialInformationEntityInternal? = nil
    if let financialInformationProviderList: [Any?] = nilOrValue(list[3]) {
      financialInformationProvider = NativeFinancialInformationEntityInternal.fromList(financialInformationProviderList)
    }
    var financialInformationUser: NativeFinancialInformationEntityInternal? = nil
    if let financialInformationUserList: [Any?] = nilOrValue(list[4]) {
      financialInformationUser = NativeFinancialInformationEntityInternal.fromList(financialInformationUserList)
    }
    let consentPurpose = NativeConsentPurposeInfoInternal.fromList(list[5] as! [Any?])!
    let consentDisplayDescriptions = list[6] as! [String?]
    let dataDateTimeRange = NativeDateTimeRangeInternal.fromList(list[7] as! [Any?])!
    let consentDateTimeRange = NativeDateTimeRangeInternal.fromList(list[8] as! [Any?])!
    let consentDataLifePeriod = NativeConsentDataLifePeriodInternal.fromList(list[9] as! [Any?])!
    let consentDataFrequency = NativeConsentDataFrequencyInternal.fromList(list[10] as! [Any?])!
    let accounts = list[11] as! [NativeConsentAccountDetailsInternal?]
    let fiTypes: [String?]? = nilOrValue(list[12])
    var accountAggregator: NativeAccountAggregatorInternal? = nil
    if let accountAggregatorList: [Any?] = nilOrValue(list[13]) {
      accountAggregator = NativeAccountAggregatorInternal.fromList(accountAggregatorList)
    }
    let statusLastUpdateTimestamp: String? = nilOrValue(list[14])

    return NativeConsentInfoDetailsInternal(
      consentHandle: consentHandle,
      consentId: consentId,
      consentStatus: consentStatus,
      financialInformationProvider: financialInformationProvider,
      financialInformationUser: financialInformationUser,
      consentPurpose: consentPurpose,
      consentDisplayDescriptions: consentDisplayDescriptions,
      dataDateTimeRange: dataDateTimeRange,
      consentDateTimeRange: consentDateTimeRange,
      consentDataLifePeriod: consentDataLifePeriod,
      consentDataFrequency: consentDataFrequency,
      accounts: accounts,
      fiTypes: fiTypes,
      accountAggregator: accountAggregator,
      statusLastUpdateTimestamp: statusLastUpdateTimestamp
    )
  }
  func toList() -> [Any?] {
    return [
      consentHandle,
      consentId,
      consentStatus,
      financialInformationProvider?.toList(),
      financialInformationUser?.toList(),
      consentPurpose.toList(),
      consentDisplayDescriptions,
      dataDateTimeRange.toList(),
      consentDateTimeRange.toList(),
      consentDataLifePeriod.toList(),
      consentDataFrequency.toList(),
      accounts,
      fiTypes,
      accountAggregator?.toList(),
      statusLastUpdateTimestamp,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeAccountAggregatorInternal {
  var id: String

  static func fromList(_ list: [Any?]) -> NativeAccountAggregatorInternal? {
    let id = list[0] as! String

    return NativeAccountAggregatorInternal(
      id: id
    )
  }
  func toList() -> [Any?] {
    return [
      id,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeFetchOfflineMessageResponseInternal {
  var offlineMessageInfo: [NativeOfflineMessageInfoInternal?]

  static func fromList(_ list: [Any?]) -> NativeFetchOfflineMessageResponseInternal? {
    let offlineMessageInfo = list[0] as! [NativeOfflineMessageInfoInternal?]

    return NativeFetchOfflineMessageResponseInternal(
      offlineMessageInfo: offlineMessageInfo
    )
  }
  func toList() -> [Any?] {
    return [
      offlineMessageInfo,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeOfflineMessageInfoInternal {
  var userId: String
  var messageId: String
  var messageAcked: String
  var messageOriginator: String
  var messageOriginatorName: String? = nil
  var messageText: String
  var messageTimestamp: String
  var messageType: String
  var requestConsentId: String
  var requestSessionId: String? = nil

  static func fromList(_ list: [Any?]) -> NativeOfflineMessageInfoInternal? {
    let userId = list[0] as! String
    let messageId = list[1] as! String
    let messageAcked = list[2] as! String
    let messageOriginator = list[3] as! String
    let messageOriginatorName: String? = nilOrValue(list[4])
    let messageText = list[5] as! String
    let messageTimestamp = list[6] as! String
    let messageType = list[7] as! String
    let requestConsentId = list[8] as! String
    let requestSessionId: String? = nilOrValue(list[9])

    return NativeOfflineMessageInfoInternal(
      userId: userId,
      messageId: messageId,
      messageAcked: messageAcked,
      messageOriginator: messageOriginator,
      messageOriginatorName: messageOriginatorName,
      messageText: messageText,
      messageTimestamp: messageTimestamp,
      messageType: messageType,
      requestConsentId: requestConsentId,
      requestSessionId: requestSessionId
    )
  }
  func toList() -> [Any?] {
    return [
      userId,
      messageId,
      messageAcked,
      messageOriginator,
      messageOriginatorName,
      messageText,
      messageTimestamp,
      messageType,
      requestConsentId,
      requestSessionId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeConsentReportInternal {
  var report: String

  static func fromList(_ list: [Any?]) -> NativeConsentReportInternal? {
    let report = list[0] as! String

    return NativeConsentReportInternal(
      report: report
    )
  }
  func toList() -> [Any?] {
    return [
      report,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativePendingConsentRequestsResponseInternal {
  var details: [NativeConsentRequestDetailInfoInternal?]

  static func fromList(_ list: [Any?]) -> NativePendingConsentRequestsResponseInternal? {
    let details = list[0] as! [NativeConsentRequestDetailInfoInternal?]

    return NativePendingConsentRequestsResponseInternal(
      details: details
    )
  }
  func toList() -> [Any?] {
    return [
      details,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeConsentRequestDetailInfoInternal {
  var consentHandleId: String
  var consentId: String? = nil
  var financialInformationUser: NativeFinancialInformationEntityInternal
  var consentPurposeInfo: NativeConsentPurposeInfoInternal
  var consentDisplayDescriptions: [String?]
  var dataDateTimeRange: NativeDateTimeRangeInternal
  var consentDateTimeRange: NativeDateTimeRangeInternal
  var consentDataFrequency: NativeConsentDataFrequencyInternal
  var consentDataLifePeriod: NativeConsentDataLifePeriodInternal
  var fiTypes: [String?]? = nil
  var statusLastUpdateTimestamp: String? = nil

  static func fromList(_ list: [Any?]) -> NativeConsentRequestDetailInfoInternal? {
    let consentHandleId = list[0] as! String
    let consentId: String? = nilOrValue(list[1])
    let financialInformationUser = NativeFinancialInformationEntityInternal.fromList(list[2] as! [Any?])!
    let consentPurposeInfo = NativeConsentPurposeInfoInternal.fromList(list[3] as! [Any?])!
    let consentDisplayDescriptions = list[4] as! [String?]
    let dataDateTimeRange = NativeDateTimeRangeInternal.fromList(list[5] as! [Any?])!
    let consentDateTimeRange = NativeDateTimeRangeInternal.fromList(list[6] as! [Any?])!
    let consentDataFrequency = NativeConsentDataFrequencyInternal.fromList(list[7] as! [Any?])!
    let consentDataLifePeriod = NativeConsentDataLifePeriodInternal.fromList(list[8] as! [Any?])!
    let fiTypes: [String?]? = nilOrValue(list[9])
    let statusLastUpdateTimestamp: String? = nilOrValue(list[10])

    return NativeConsentRequestDetailInfoInternal(
      consentHandleId: consentHandleId,
      consentId: consentId,
      financialInformationUser: financialInformationUser,
      consentPurposeInfo: consentPurposeInfo,
      consentDisplayDescriptions: consentDisplayDescriptions,
      dataDateTimeRange: dataDateTimeRange,
      consentDateTimeRange: consentDateTimeRange,
      consentDataFrequency: consentDataFrequency,
      consentDataLifePeriod: consentDataLifePeriod,
      fiTypes: fiTypes,
      statusLastUpdateTimestamp: statusLastUpdateTimestamp
    )
  }
  func toList() -> [Any?] {
    return [
      consentHandleId,
      consentId,
      financialInformationUser.toList(),
      consentPurposeInfo.toList(),
      consentDisplayDescriptions,
      dataDateTimeRange.toList(),
      consentDateTimeRange.toList(),
      consentDataFrequency.toList(),
      consentDataLifePeriod.toList(),
      fiTypes,
      statusLastUpdateTimestamp,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeSelfConsentRequestInternal {
  var createTime: String
  var startTime: String
  var expireTime: String
  var linkedAccounts: [NativeLinkedAccountDetailsInfoInternal?]
  var consentTypes: [String?]
  var consentFiTypes: [String?]
  var mode: String
  var fetchType: String
  var frequency: NativeConsentDataFrequencyInternal
  var dataLife: NativeConsentDataLifePeriodInternal
  var purposeText: String
  var purposeType: String

  static func fromList(_ list: [Any?]) -> NativeSelfConsentRequestInternal? {
    let createTime = list[0] as! String
    let startTime = list[1] as! String
    let expireTime = list[2] as! String
    let linkedAccounts = list[3] as! [NativeLinkedAccountDetailsInfoInternal?]
    let consentTypes = list[4] as! [String?]
    let consentFiTypes = list[5] as! [String?]
    let mode = list[6] as! String
    let fetchType = list[7] as! String
    let frequency = NativeConsentDataFrequencyInternal.fromList(list[8] as! [Any?])!
    let dataLife = NativeConsentDataLifePeriodInternal.fromList(list[9] as! [Any?])!
    let purposeText = list[10] as! String
    let purposeType = list[11] as! String

    return NativeSelfConsentRequestInternal(
      createTime: createTime,
      startTime: startTime,
      expireTime: expireTime,
      linkedAccounts: linkedAccounts,
      consentTypes: consentTypes,
      consentFiTypes: consentFiTypes,
      mode: mode,
      fetchType: fetchType,
      frequency: frequency,
      dataLife: dataLife,
      purposeText: purposeText,
      purposeType: purposeType
    )
  }
  func toList() -> [Any?] {
    return [
      createTime,
      startTime,
      expireTime,
      linkedAccounts,
      consentTypes,
      consentFiTypes,
      mode,
      fetchType,
      frequency.toList(),
      dataLife.toList(),
      purposeText,
      purposeType,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeConsentHistoryInternal {
  var consentId: String
  var consentTimestamp: String? = nil

  static func fromList(_ list: [Any?]) -> NativeConsentHistoryInternal? {
    let consentId = list[0] as! String
    let consentTimestamp: String? = nilOrValue(list[1])

    return NativeConsentHistoryInternal(
      consentId: consentId,
      consentTimestamp: consentTimestamp
    )
  }
  func toList() -> [Any?] {
    return [
      consentId,
      consentTimestamp,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeAccountDataInternal {
  var consentId: String? = nil
  var timestamp: String? = nil
  var sessionId: String? = nil
  var transactionId: String? = nil

  static func fromList(_ list: [Any?]) -> NativeAccountDataInternal? {
    let consentId: String? = nilOrValue(list[0])
    let timestamp: String? = nilOrValue(list[1])
    let sessionId: String? = nilOrValue(list[2])
    let transactionId: String? = nilOrValue(list[3])

    return NativeAccountDataInternal(
      consentId: consentId,
      timestamp: timestamp,
      sessionId: sessionId,
      transactionId: transactionId
    )
  }
  func toList() -> [Any?] {
    return [
      consentId,
      timestamp,
      sessionId,
      transactionId,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeAccountDataFetchInternal {
  var fipId: String
  var decryptedInfo: [NativeFIDecryptedDataInfoInternal?]

  static func fromList(_ list: [Any?]) -> NativeAccountDataFetchInternal? {
    let fipId = list[0] as! String
    let decryptedInfo = list[1] as! [NativeFIDecryptedDataInfoInternal?]

    return NativeAccountDataFetchInternal(
      fipId: fipId,
      decryptedInfo: decryptedInfo
    )
  }
  func toList() -> [Any?] {
    return [
      fipId,
      decryptedInfo,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeFIDecryptedDataInfoInternal {
  var linkReferenceNumber: String
  var accountReferenceNumber: String? = nil
  var maskedAccountNumber: String
  var fiType: String? = nil
  var accountType: String? = nil
  var decryptedData: String

  static func fromList(_ list: [Any?]) -> NativeFIDecryptedDataInfoInternal? {
    let linkReferenceNumber = list[0] as! String
    let accountReferenceNumber: String? = nilOrValue(list[1])
    let maskedAccountNumber = list[2] as! String
    let fiType: String? = nilOrValue(list[3])
    let accountType: String? = nilOrValue(list[4])
    let decryptedData = list[5] as! String

    return NativeFIDecryptedDataInfoInternal(
      linkReferenceNumber: linkReferenceNumber,
      accountReferenceNumber: accountReferenceNumber,
      maskedAccountNumber: maskedAccountNumber,
      fiType: fiType,
      accountType: accountType,
      decryptedData: decryptedData
    )
  }
  func toList() -> [Any?] {
    return [
      linkReferenceNumber,
      accountReferenceNumber,
      maskedAccountNumber,
      fiType,
      accountType,
      decryptedData,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct NativeConsentHistoryResponseInternal {
  var consentHistory: [NativeConsentHistoryInternal?]? = nil

  static func fromList(_ list: [Any?]) -> NativeConsentHistoryResponseInternal? {
    let consentHistory: [NativeConsentHistoryInternal?]? = nilOrValue(list[0])

    return NativeConsentHistoryResponseInternal(
      consentHistory: consentHistory
    )
  }
  func toList() -> [Any?] {
    return [
      consentHistory,
    ]
  }
}

private class NativeFinvuManagerInternalCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return NativeAccountAggregatorInternal.fromList(self.readValue() as! [Any?])
      case 129:
        return NativeAccountDataFetchInternal.fromList(self.readValue() as! [Any?])
      case 130:
        return NativeAccountDataInternal.fromList(self.readValue() as! [Any?])
      case 131:
        return NativeConsentAccountDetailsInternal.fromList(self.readValue() as! [Any?])
      case 132:
        return NativeConsentDataFrequencyInternal.fromList(self.readValue() as! [Any?])
      case 133:
        return NativeConsentDataLifePeriodInternal.fromList(self.readValue() as! [Any?])
      case 134:
        return NativeConsentHistoryInternal.fromList(self.readValue() as! [Any?])
      case 135:
        return NativeConsentHistoryResponseInternal.fromList(self.readValue() as! [Any?])
      case 136:
        return NativeConsentInfoDetailsInternal.fromList(self.readValue() as! [Any?])
      case 137:
        return NativeConsentPurposeInfoInternal.fromList(self.readValue() as! [Any?])
      case 138:
        return NativeConsentReportInternal.fromList(self.readValue() as! [Any?])
      case 139:
        return NativeConsentRequestDetailInfoInternal.fromList(self.readValue() as! [Any?])
      case 140:
        return NativeDateTimeRangeInternal.fromList(self.readValue() as! [Any?])
      case 141:
        return NativeDeviceBindingResponse.fromList(self.readValue() as! [Any?])
      case 142:
        return NativeFIDecryptedDataInfoInternal.fromList(self.readValue() as! [Any?])
      case 143:
        return NativeFetchOfflineMessageResponseInternal.fromList(self.readValue() as! [Any?])
      case 144:
        return NativeFinancialInformationEntityInternal.fromList(self.readValue() as! [Any?])
      case 145:
        return NativeFinancialInformationEntityInternal.fromList(self.readValue() as! [Any?])
      case 146:
        return NativeForgotHandleInternal.fromList(self.readValue() as! [Any?])
      case 147:
        return NativeLinkedAccountDetailsInfoInternal.fromList(self.readValue() as! [Any?])
      case 148:
        return NativeLoginResponse.fromList(self.readValue() as! [Any?])
      case 149:
        return NativeOfflineMessageInfoInternal.fromList(self.readValue() as! [Any?])
      case 150:
        return NativePendingConsentRequestsResponseInternal.fromList(self.readValue() as! [Any?])
      case 151:
        return NativeSelfConsentRequestInternal.fromList(self.readValue() as! [Any?])
      case 152:
        return NativeUserConsentInfoInternal.fromList(self.readValue() as! [Any?])
      case 153:
        return NativeUserConsentResponseInternal.fromList(self.readValue() as! [Any?])
      case 154:
        return NativeUserInfoInternal.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class NativeFinvuManagerInternalCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? NativeAccountAggregatorInternal {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? NativeAccountDataFetchInternal {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? NativeAccountDataInternal {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? NativeConsentAccountDetailsInternal {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? NativeConsentDataFrequencyInternal {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? NativeConsentDataLifePeriodInternal {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? NativeConsentHistoryInternal {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? NativeConsentHistoryResponseInternal {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? NativeConsentInfoDetailsInternal {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? NativeConsentPurposeInfoInternal {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? NativeConsentReportInternal {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? NativeConsentRequestDetailInfoInternal {
      super.writeByte(139)
      super.writeValue(value.toList())
    } else if let value = value as? NativeDateTimeRangeInternal {
      super.writeByte(140)
      super.writeValue(value.toList())
    } else if let value = value as? NativeDeviceBindingResponse {
      super.writeByte(141)
      super.writeValue(value.toList())
    } else if let value = value as? NativeFIDecryptedDataInfoInternal {
      super.writeByte(142)
      super.writeValue(value.toList())
    } else if let value = value as? NativeFetchOfflineMessageResponseInternal {
      super.writeByte(143)
      super.writeValue(value.toList())
    } else if let value = value as? NativeFinancialInformationEntityInternal {
      super.writeByte(144)
      super.writeValue(value.toList())
    } else if let value = value as? NativeFinancialInformationEntityInternal {
      super.writeByte(145)
      super.writeValue(value.toList())
    } else if let value = value as? NativeForgotHandleInternal {
      super.writeByte(146)
      super.writeValue(value.toList())
    } else if let value = value as? NativeLinkedAccountDetailsInfoInternal {
      super.writeByte(147)
      super.writeValue(value.toList())
    } else if let value = value as? NativeLoginResponse {
      super.writeByte(148)
      super.writeValue(value.toList())
    } else if let value = value as? NativeOfflineMessageInfoInternal {
      super.writeByte(149)
      super.writeValue(value.toList())
    } else if let value = value as? NativePendingConsentRequestsResponseInternal {
      super.writeByte(150)
      super.writeValue(value.toList())
    } else if let value = value as? NativeSelfConsentRequestInternal {
      super.writeByte(151)
      super.writeValue(value.toList())
    } else if let value = value as? NativeUserConsentInfoInternal {
      super.writeByte(152)
      super.writeValue(value.toList())
    } else if let value = value as? NativeUserConsentResponseInternal {
      super.writeByte(153)
      super.writeValue(value.toList())
    } else if let value = value as? NativeUserInfoInternal {
      super.writeByte(154)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class NativeFinvuManagerInternalCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return NativeFinvuManagerInternalCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return NativeFinvuManagerInternalCodecWriter(data: data)
  }
}

class NativeFinvuManagerInternalCodec: FlutterStandardMessageCodec {
  static let shared = NativeFinvuManagerInternalCodec(readerWriter: NativeFinvuManagerInternalCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NativeFinvuManagerInternal {
  func loginWithUsernameAndPasscode(username: String, passcode: String, totp: String?, deviceId: String?, completion: @escaping (Result<NativeLoginResponse, Error>) -> Void)
  func deviceBinding(otpLessToken: String, deviceId: String, osType: String, osVersion: String, appId: String, appVersion: String, simSerialNumber: String?, completion: @escaping (Result<NativeDeviceBindingResponse, Error>) -> Void)
  func initiateForgotPasscodeRequest(username: String, mobileNumber: String, completion: @escaping (Result<Void, Error>) -> Void)
  func verifyForgotPasscodeOTP(username: String, mobileNumber: String, otp: String, newPasscode: String, completion: @escaping (Result<Void, Error>) -> Void)
  func initiateForgotHandleRequest(mobileNumber: String, completion: @escaping (Result<Void, Error>) -> Void)
  func verifyForgotHandleOTP(otp: String, completion: @escaping (Result<NativeForgotHandleInternal, Error>) -> Void)
  func register(username: String, mobileNumber: String, passcode: String, completion: @escaping (Result<Void, Error>) -> Void)
  func fetchUserInfo(completion: @escaping (Result<NativeUserInfoInternal, Error>) -> Void)
  func unlinkAccount(account: NativeLinkedAccountDetailsInfoInternal, completion: @escaping (Result<Void, Error>) -> Void)
  func getUserConsents(completion: @escaping (Result<NativeUserConsentResponseInternal, Error>) -> Void)
  func getUserConsentDetails(consent: NativeUserConsentInfoInternal, completion: @escaping (Result<NativeConsentInfoDetailsInternal, Error>) -> Void)
  func fetchOfflineMessages(completion: @escaping (Result<NativeFetchOfflineMessageResponseInternal, Error>) -> Void)
  func closeFinvuAccount(password: String, completion: @escaping (Result<Void, Error>) -> Void)
  func changePasscode(currentPasscode: String, newPasscode: String, completion: @escaping (Result<Void, Error>) -> Void)
  func getUserConsentReport(completion: @escaping (Result<NativeConsentReportInternal, Error>) -> Void)
  func fetchPendingConsentRequests(completion: @escaping (Result<NativePendingConsentRequestsResponseInternal, Error>) -> Void)
  func getUserConsentDetailsForId(consentId: String, completion: @escaping (Result<NativeConsentInfoDetailsInternal, Error>) -> Void)
  func getConsentHistory(consentId: String, completion: @escaping (Result<NativeConsentHistoryResponseInternal, Error>) -> Void)
  func initiateAccountDataRequest(from: String, to: String, consentId: String, publicKeyExpiry: String, completion: @escaping (Result<NativeAccountDataInternal, Error>) -> Void)
  func requestSelfConsent(request: NativeSelfConsentRequestInternal, completion: @escaping (Result<Void, Error>) -> Void)
  func fetchAccountData(sessionId: String, consentId: String, completion: @escaping (Result<NativeAccountDataFetchInternal, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NativeFinvuManagerInternalSetup {
  /// The codec used by NativeFinvuManagerInternal.
  static var codec: FlutterStandardMessageCodec { NativeFinvuManagerInternalCodec.shared }
  /// Sets up an instance of `NativeFinvuManagerInternal` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NativeFinvuManagerInternal?) {
    let loginWithUsernameAndPasscodeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.loginWithUsernameAndPasscode", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      loginWithUsernameAndPasscodeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let usernameArg = args[0] as! String
        let passcodeArg = args[1] as! String
        let totpArg: String? = nilOrValue(args[2])
        let deviceIdArg: String? = nilOrValue(args[3])
        api.loginWithUsernameAndPasscode(username: usernameArg, passcode: passcodeArg, totp: totpArg, deviceId: deviceIdArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      loginWithUsernameAndPasscodeChannel.setMessageHandler(nil)
    }
    let deviceBindingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.deviceBinding", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deviceBindingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let otpLessTokenArg = args[0] as! String
        let deviceIdArg = args[1] as! String
        let osTypeArg = args[2] as! String
        let osVersionArg = args[3] as! String
        let appIdArg = args[4] as! String
        let appVersionArg = args[5] as! String
        let simSerialNumberArg: String? = nilOrValue(args[6])
        api.deviceBinding(otpLessToken: otpLessTokenArg, deviceId: deviceIdArg, osType: osTypeArg, osVersion: osVersionArg, appId: appIdArg, appVersion: appVersionArg, simSerialNumber: simSerialNumberArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      deviceBindingChannel.setMessageHandler(nil)
    }
    let initiateForgotPasscodeRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.initiateForgotPasscodeRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initiateForgotPasscodeRequestChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let usernameArg = args[0] as! String
        let mobileNumberArg = args[1] as! String
        api.initiateForgotPasscodeRequest(username: usernameArg, mobileNumber: mobileNumberArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      initiateForgotPasscodeRequestChannel.setMessageHandler(nil)
    }
    let verifyForgotPasscodeOTPChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.verifyForgotPasscodeOTP", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      verifyForgotPasscodeOTPChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let usernameArg = args[0] as! String
        let mobileNumberArg = args[1] as! String
        let otpArg = args[2] as! String
        let newPasscodeArg = args[3] as! String
        api.verifyForgotPasscodeOTP(username: usernameArg, mobileNumber: mobileNumberArg, otp: otpArg, newPasscode: newPasscodeArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      verifyForgotPasscodeOTPChannel.setMessageHandler(nil)
    }
    let initiateForgotHandleRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.initiateForgotHandleRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initiateForgotHandleRequestChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let mobileNumberArg = args[0] as! String
        api.initiateForgotHandleRequest(mobileNumber: mobileNumberArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      initiateForgotHandleRequestChannel.setMessageHandler(nil)
    }
    let verifyForgotHandleOTPChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.verifyForgotHandleOTP", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      verifyForgotHandleOTPChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let otpArg = args[0] as! String
        api.verifyForgotHandleOTP(otp: otpArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      verifyForgotHandleOTPChannel.setMessageHandler(nil)
    }
    let registerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.register", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      registerChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let usernameArg = args[0] as! String
        let mobileNumberArg = args[1] as! String
        let passcodeArg = args[2] as! String
        api.register(username: usernameArg, mobileNumber: mobileNumberArg, passcode: passcodeArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      registerChannel.setMessageHandler(nil)
    }
    let fetchUserInfoChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.fetchUserInfo", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fetchUserInfoChannel.setMessageHandler { _, reply in
        api.fetchUserInfo() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      fetchUserInfoChannel.setMessageHandler(nil)
    }
    let unlinkAccountChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.unlinkAccount", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      unlinkAccountChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let accountArg = args[0] as! NativeLinkedAccountDetailsInfoInternal
        api.unlinkAccount(account: accountArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      unlinkAccountChannel.setMessageHandler(nil)
    }
    let getUserConsentsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.getUserConsents", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUserConsentsChannel.setMessageHandler { _, reply in
        api.getUserConsents() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getUserConsentsChannel.setMessageHandler(nil)
    }
    let getUserConsentDetailsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.getUserConsentDetails", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUserConsentDetailsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let consentArg = args[0] as! NativeUserConsentInfoInternal
        api.getUserConsentDetails(consent: consentArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getUserConsentDetailsChannel.setMessageHandler(nil)
    }
    let fetchOfflineMessagesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.fetchOfflineMessages", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fetchOfflineMessagesChannel.setMessageHandler { _, reply in
        api.fetchOfflineMessages() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      fetchOfflineMessagesChannel.setMessageHandler(nil)
    }
    let closeFinvuAccountChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.closeFinvuAccount", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      closeFinvuAccountChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let passwordArg = args[0] as! String
        api.closeFinvuAccount(password: passwordArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      closeFinvuAccountChannel.setMessageHandler(nil)
    }
    let changePasscodeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.changePasscode", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      changePasscodeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let currentPasscodeArg = args[0] as! String
        let newPasscodeArg = args[1] as! String
        api.changePasscode(currentPasscode: currentPasscodeArg, newPasscode: newPasscodeArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      changePasscodeChannel.setMessageHandler(nil)
    }
    let getUserConsentReportChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.getUserConsentReport", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUserConsentReportChannel.setMessageHandler { _, reply in
        api.getUserConsentReport() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getUserConsentReportChannel.setMessageHandler(nil)
    }
    let fetchPendingConsentRequestsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.fetchPendingConsentRequests", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fetchPendingConsentRequestsChannel.setMessageHandler { _, reply in
        api.fetchPendingConsentRequests() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      fetchPendingConsentRequestsChannel.setMessageHandler(nil)
    }
    let getUserConsentDetailsForIdChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.getUserConsentDetailsForId", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getUserConsentDetailsForIdChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let consentIdArg = args[0] as! String
        api.getUserConsentDetailsForId(consentId: consentIdArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getUserConsentDetailsForIdChannel.setMessageHandler(nil)
    }
    let getConsentHistoryChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.getConsentHistory", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getConsentHistoryChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let consentIdArg = args[0] as! String
        api.getConsentHistory(consentId: consentIdArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getConsentHistoryChannel.setMessageHandler(nil)
    }
    let initiateAccountDataRequestChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.initiateAccountDataRequest", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initiateAccountDataRequestChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let fromArg = args[0] as! String
        let toArg = args[1] as! String
        let consentIdArg = args[2] as! String
        let publicKeyExpiryArg = args[3] as! String
        api.initiateAccountDataRequest(from: fromArg, to: toArg, consentId: consentIdArg, publicKeyExpiry: publicKeyExpiryArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      initiateAccountDataRequestChannel.setMessageHandler(nil)
    }
    let requestSelfConsentChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.requestSelfConsent", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      requestSelfConsentChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! NativeSelfConsentRequestInternal
        api.requestSelfConsent(request: requestArg) { result in
          switch result {
            case .success:
              reply(wrapResult(nil))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      requestSelfConsentChannel.setMessageHandler(nil)
    }
    let fetchAccountDataChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.fetchAccountData", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fetchAccountDataChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let sessionIdArg = args[0] as! String
        let consentIdArg = args[1] as! String
        api.fetchAccountData(sessionId: sessionIdArg, consentId: consentIdArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      fetchAccountDataChannel.setMessageHandler(nil)
    }
  }
}
