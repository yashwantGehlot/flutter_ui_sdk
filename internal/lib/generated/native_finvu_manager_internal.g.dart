// Autogenerated from Pigeon (v14.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

class NativeForgotHandleInternal {
  NativeForgotHandleInternal({
    required this.userIds,
  });

  List<String?> userIds;

  Object encode() {
    return <Object?>[
      userIds,
    ];
  }

  static NativeForgotHandleInternal decode(Object result) {
    result as List<Object?>;
    return NativeForgotHandleInternal(
      userIds: (result[0] as List<Object?>?)!.cast<String?>(),
    );
  }
}

class NativeLoginResponse {
  NativeLoginResponse({
    this.deviceBindingValid,
  });

  bool? deviceBindingValid;

  Object encode() {
    return <Object?>[
      deviceBindingValid,
    ];
  }

  static NativeLoginResponse decode(Object result) {
    result as List<Object?>;
    return NativeLoginResponse(
      deviceBindingValid: result[0] as bool?,
    );
  }
}

class NativeDeviceBindingResponse {
  NativeDeviceBindingResponse({
    this.secret,
  });

  String? secret;

  Object encode() {
    return <Object?>[
      secret,
    ];
  }

  static NativeDeviceBindingResponse decode(Object result) {
    result as List<Object?>;
    return NativeDeviceBindingResponse(
      secret: result[0] as String?,
    );
  }
}

class NativeUserInfoInternal {
  NativeUserInfoInternal({
    required this.userId,
    required this.mobileNumber,
    required this.emailId,
  });

  String userId;

  String mobileNumber;

  String emailId;

  Object encode() {
    return <Object?>[
      userId,
      mobileNumber,
      emailId,
    ];
  }

  static NativeUserInfoInternal decode(Object result) {
    result as List<Object?>;
    return NativeUserInfoInternal(
      userId: result[0]! as String,
      mobileNumber: result[1]! as String,
      emailId: result[2]! as String,
    );
  }
}

class NativeLinkedAccountDetailsInfoInternal {
  NativeLinkedAccountDetailsInfoInternal({
    required this.userId,
    required this.fipId,
    required this.fipName,
    required this.maskedAccountNumber,
    required this.accountReferenceNumber,
    required this.linkReferenceNumber,
    this.consentIdList,
    required this.fiType,
    required this.accountType,
    this.linkedAccountUpdateTimestamp,
    required this.authenticatorType,
  });

  String userId;

  String fipId;

  String fipName;

  String maskedAccountNumber;

  String accountReferenceNumber;

  String linkReferenceNumber;

  List<String?>? consentIdList;

  String fiType;

  String accountType;

  String? linkedAccountUpdateTimestamp;

  String authenticatorType;

  Object encode() {
    return <Object?>[
      userId,
      fipId,
      fipName,
      maskedAccountNumber,
      accountReferenceNumber,
      linkReferenceNumber,
      consentIdList,
      fiType,
      accountType,
      linkedAccountUpdateTimestamp,
      authenticatorType,
    ];
  }

  static NativeLinkedAccountDetailsInfoInternal decode(Object result) {
    result as List<Object?>;
    return NativeLinkedAccountDetailsInfoInternal(
      userId: result[0]! as String,
      fipId: result[1]! as String,
      fipName: result[2]! as String,
      maskedAccountNumber: result[3]! as String,
      accountReferenceNumber: result[4]! as String,
      linkReferenceNumber: result[5]! as String,
      consentIdList: (result[6] as List<Object?>?)?.cast<String?>(),
      fiType: result[7]! as String,
      accountType: result[8]! as String,
      linkedAccountUpdateTimestamp: result[9] as String?,
      authenticatorType: result[10]! as String,
    );
  }
}

class NativeUserConsentInfoInternal {
  NativeUserConsentInfoInternal({
    required this.consentIntentId,
    this.consentIntentEntityId,
    required this.consentIntentEntityName,
    required this.consentIdList,
    required this.consentIntentUpdateTimestamp,
    required this.consentPurposeText,
    this.status,
  });

  String consentIntentId;

  String? consentIntentEntityId;

  String consentIntentEntityName;

  List<String?> consentIdList;

  String consentIntentUpdateTimestamp;

  String consentPurposeText;

  String? status;

  Object encode() {
    return <Object?>[
      consentIntentId,
      consentIntentEntityId,
      consentIntentEntityName,
      consentIdList,
      consentIntentUpdateTimestamp,
      consentPurposeText,
      status,
    ];
  }

  static NativeUserConsentInfoInternal decode(Object result) {
    result as List<Object?>;
    return NativeUserConsentInfoInternal(
      consentIntentId: result[0]! as String,
      consentIntentEntityId: result[1] as String?,
      consentIntentEntityName: result[2]! as String,
      consentIdList: (result[3] as List<Object?>?)!.cast<String?>(),
      consentIntentUpdateTimestamp: result[4]! as String,
      consentPurposeText: result[5]! as String,
      status: result[6] as String?,
    );
  }
}

class NativeUserConsentResponseInternal {
  NativeUserConsentResponseInternal({
    required this.userConsents,
  });

  List<NativeUserConsentInfoInternal?> userConsents;

  Object encode() {
    return <Object?>[
      userConsents,
    ];
  }

  static NativeUserConsentResponseInternal decode(Object result) {
    result as List<Object?>;
    return NativeUserConsentResponseInternal(
      userConsents: (result[0] as List<Object?>?)!.cast<NativeUserConsentInfoInternal?>(),
    );
  }
}

class NativeFinancialInformationEntityInternal {
  NativeFinancialInformationEntityInternal({
    required this.id,
    required this.name,
  });

  String id;

  String name;

  Object encode() {
    return <Object?>[
      id,
      name,
    ];
  }

  static NativeFinancialInformationEntityInternal decode(Object result) {
    result as List<Object?>;
    return NativeFinancialInformationEntityInternal(
      id: result[0]! as String,
      name: result[1]! as String,
    );
  }
}

class NativeConsentPurposeInfoInternal {
  NativeConsentPurposeInfoInternal({
    required this.code,
    required this.text,
  });

  String code;

  String text;

  Object encode() {
    return <Object?>[
      code,
      text,
    ];
  }

  static NativeConsentPurposeInfoInternal decode(Object result) {
    result as List<Object?>;
    return NativeConsentPurposeInfoInternal(
      code: result[0]! as String,
      text: result[1]! as String,
    );
  }
}

class NativeDateTimeRangeInternal {
  NativeDateTimeRangeInternal({
    required this.from,
    required this.to,
  });

  String from;

  String to;

  Object encode() {
    return <Object?>[
      from,
      to,
    ];
  }

  static NativeDateTimeRangeInternal decode(Object result) {
    result as List<Object?>;
    return NativeDateTimeRangeInternal(
      from: result[0]! as String,
      to: result[1]! as String,
    );
  }
}

class NativeConsentDataFrequencyInternal {
  NativeConsentDataFrequencyInternal({
    required this.unit,
    required this.value,
  });

  String unit;

  double value;

  Object encode() {
    return <Object?>[
      unit,
      value,
    ];
  }

  static NativeConsentDataFrequencyInternal decode(Object result) {
    result as List<Object?>;
    return NativeConsentDataFrequencyInternal(
      unit: result[0]! as String,
      value: result[1]! as double,
    );
  }
}

class NativeConsentDataLifePeriodInternal {
  NativeConsentDataLifePeriodInternal({
    required this.unit,
    required this.value,
  });

  String unit;

  double value;

  Object encode() {
    return <Object?>[
      unit,
      value,
    ];
  }

  static NativeConsentDataLifePeriodInternal decode(Object result) {
    result as List<Object?>;
    return NativeConsentDataLifePeriodInternal(
      unit: result[0]! as String,
      value: result[1]! as double,
    );
  }
}

class NativeConsentAccountDetailsInternal {
  NativeConsentAccountDetailsInternal({
    required this.fiType,
    required this.fipId,
    required this.accountType,
    this.accountReferenceNumber,
    required this.maskedAccountNumber,
    required this.linkReferenceNumber,
  });

  String fiType;

  String fipId;

  String accountType;

  String? accountReferenceNumber;

  String maskedAccountNumber;

  String linkReferenceNumber;

  Object encode() {
    return <Object?>[
      fiType,
      fipId,
      accountType,
      accountReferenceNumber,
      maskedAccountNumber,
      linkReferenceNumber,
    ];
  }

  static NativeConsentAccountDetailsInternal decode(Object result) {
    result as List<Object?>;
    return NativeConsentAccountDetailsInternal(
      fiType: result[0]! as String,
      fipId: result[1]! as String,
      accountType: result[2]! as String,
      accountReferenceNumber: result[3] as String?,
      maskedAccountNumber: result[4]! as String,
      linkReferenceNumber: result[5]! as String,
    );
  }
}

class NativeConsentInfoDetailsInternal {
  NativeConsentInfoDetailsInternal({
    this.consentHandle,
    this.consentId,
    required this.consentStatus,
    this.financialInformationProvider,
    this.financialInformationUser,
    required this.consentPurpose,
    required this.consentDisplayDescriptions,
    required this.dataDateTimeRange,
    required this.consentDateTimeRange,
    required this.consentDataLifePeriod,
    required this.consentDataFrequency,
    required this.accounts,
    this.fiTypes,
    this.accountAggregator,
    this.statusLastUpdateTimestamp,
  });

  String? consentHandle;

  String? consentId;

  String consentStatus;

  NativeFinancialInformationEntityInternal? financialInformationProvider;

  NativeFinancialInformationEntityInternal? financialInformationUser;

  NativeConsentPurposeInfoInternal consentPurpose;

  List<String?> consentDisplayDescriptions;

  NativeDateTimeRangeInternal dataDateTimeRange;

  NativeDateTimeRangeInternal consentDateTimeRange;

  NativeConsentDataLifePeriodInternal consentDataLifePeriod;

  NativeConsentDataFrequencyInternal consentDataFrequency;

  List<NativeConsentAccountDetailsInternal?> accounts;

  List<String?>? fiTypes;

  NativeAccountAggregatorInternal? accountAggregator;

  String? statusLastUpdateTimestamp;

  Object encode() {
    return <Object?>[
      consentHandle,
      consentId,
      consentStatus,
      financialInformationProvider?.encode(),
      financialInformationUser?.encode(),
      consentPurpose.encode(),
      consentDisplayDescriptions,
      dataDateTimeRange.encode(),
      consentDateTimeRange.encode(),
      consentDataLifePeriod.encode(),
      consentDataFrequency.encode(),
      accounts,
      fiTypes,
      accountAggregator?.encode(),
      statusLastUpdateTimestamp,
    ];
  }

  static NativeConsentInfoDetailsInternal decode(Object result) {
    result as List<Object?>;
    return NativeConsentInfoDetailsInternal(
      consentHandle: result[0] as String?,
      consentId: result[1] as String?,
      consentStatus: result[2]! as String,
      financialInformationProvider: result[3] != null
          ? NativeFinancialInformationEntityInternal.decode(result[3]! as List<Object?>)
          : null,
      financialInformationUser: result[4] != null
          ? NativeFinancialInformationEntityInternal.decode(result[4]! as List<Object?>)
          : null,
      consentPurpose: NativeConsentPurposeInfoInternal.decode(result[5]! as List<Object?>),
      consentDisplayDescriptions: (result[6] as List<Object?>?)!.cast<String?>(),
      dataDateTimeRange: NativeDateTimeRangeInternal.decode(result[7]! as List<Object?>),
      consentDateTimeRange: NativeDateTimeRangeInternal.decode(result[8]! as List<Object?>),
      consentDataLifePeriod: NativeConsentDataLifePeriodInternal.decode(result[9]! as List<Object?>),
      consentDataFrequency: NativeConsentDataFrequencyInternal.decode(result[10]! as List<Object?>),
      accounts: (result[11] as List<Object?>?)!.cast<NativeConsentAccountDetailsInternal?>(),
      fiTypes: (result[12] as List<Object?>?)?.cast<String?>(),
      accountAggregator: result[13] != null
          ? NativeAccountAggregatorInternal.decode(result[13]! as List<Object?>)
          : null,
      statusLastUpdateTimestamp: result[14] as String?,
    );
  }
}

class NativeAccountAggregatorInternal {
  NativeAccountAggregatorInternal({
    required this.id,
  });

  String id;

  Object encode() {
    return <Object?>[
      id,
    ];
  }

  static NativeAccountAggregatorInternal decode(Object result) {
    result as List<Object?>;
    return NativeAccountAggregatorInternal(
      id: result[0]! as String,
    );
  }
}

class NativeFetchOfflineMessageResponseInternal {
  NativeFetchOfflineMessageResponseInternal({
    required this.offlineMessageInfo,
  });

  List<NativeOfflineMessageInfoInternal?> offlineMessageInfo;

  Object encode() {
    return <Object?>[
      offlineMessageInfo,
    ];
  }

  static NativeFetchOfflineMessageResponseInternal decode(Object result) {
    result as List<Object?>;
    return NativeFetchOfflineMessageResponseInternal(
      offlineMessageInfo: (result[0] as List<Object?>?)!.cast<NativeOfflineMessageInfoInternal?>(),
    );
  }
}

class NativeOfflineMessageInfoInternal {
  NativeOfflineMessageInfoInternal({
    required this.userId,
    required this.messageId,
    required this.messageAcked,
    required this.messageOriginator,
    this.messageOriginatorName,
    required this.messageText,
    required this.messageTimestamp,
    required this.messageType,
    required this.requestConsentId,
    this.requestSessionId,
  });

  String userId;

  String messageId;

  String messageAcked;

  String messageOriginator;

  String? messageOriginatorName;

  String messageText;

  String messageTimestamp;

  String messageType;

  String requestConsentId;

  String? requestSessionId;

  Object encode() {
    return <Object?>[
      userId,
      messageId,
      messageAcked,
      messageOriginator,
      messageOriginatorName,
      messageText,
      messageTimestamp,
      messageType,
      requestConsentId,
      requestSessionId,
    ];
  }

  static NativeOfflineMessageInfoInternal decode(Object result) {
    result as List<Object?>;
    return NativeOfflineMessageInfoInternal(
      userId: result[0]! as String,
      messageId: result[1]! as String,
      messageAcked: result[2]! as String,
      messageOriginator: result[3]! as String,
      messageOriginatorName: result[4] as String?,
      messageText: result[5]! as String,
      messageTimestamp: result[6]! as String,
      messageType: result[7]! as String,
      requestConsentId: result[8]! as String,
      requestSessionId: result[9] as String?,
    );
  }
}

class NativeConsentReportInternal {
  NativeConsentReportInternal({
    required this.report,
  });

  String report;

  Object encode() {
    return <Object?>[
      report,
    ];
  }

  static NativeConsentReportInternal decode(Object result) {
    result as List<Object?>;
    return NativeConsentReportInternal(
      report: result[0]! as String,
    );
  }
}

class NativePendingConsentRequestsResponseInternal {
  NativePendingConsentRequestsResponseInternal({
    required this.details,
  });

  List<NativeConsentRequestDetailInfoInternal?> details;

  Object encode() {
    return <Object?>[
      details,
    ];
  }

  static NativePendingConsentRequestsResponseInternal decode(Object result) {
    result as List<Object?>;
    return NativePendingConsentRequestsResponseInternal(
      details: (result[0] as List<Object?>?)!.cast<NativeConsentRequestDetailInfoInternal?>(),
    );
  }
}

class NativeConsentRequestDetailInfoInternal {
  NativeConsentRequestDetailInfoInternal({
    required this.consentHandleId,
    this.consentId,
    required this.financialInformationUser,
    required this.consentPurposeInfo,
    required this.consentDisplayDescriptions,
    required this.dataDateTimeRange,
    required this.consentDateTimeRange,
    required this.consentDataFrequency,
    required this.consentDataLifePeriod,
    this.fiTypes,
    this.statusLastUpdateTimestamp,
  });

  String consentHandleId;

  String? consentId;

  NativeFinancialInformationEntityInternal financialInformationUser;

  NativeConsentPurposeInfoInternal consentPurposeInfo;

  List<String?> consentDisplayDescriptions;

  NativeDateTimeRangeInternal dataDateTimeRange;

  NativeDateTimeRangeInternal consentDateTimeRange;

  NativeConsentDataFrequencyInternal consentDataFrequency;

  NativeConsentDataLifePeriodInternal consentDataLifePeriod;

  List<String?>? fiTypes;

  String? statusLastUpdateTimestamp;

  Object encode() {
    return <Object?>[
      consentHandleId,
      consentId,
      financialInformationUser.encode(),
      consentPurposeInfo.encode(),
      consentDisplayDescriptions,
      dataDateTimeRange.encode(),
      consentDateTimeRange.encode(),
      consentDataFrequency.encode(),
      consentDataLifePeriod.encode(),
      fiTypes,
      statusLastUpdateTimestamp,
    ];
  }

  static NativeConsentRequestDetailInfoInternal decode(Object result) {
    result as List<Object?>;
    return NativeConsentRequestDetailInfoInternal(
      consentHandleId: result[0]! as String,
      consentId: result[1] as String?,
      financialInformationUser: NativeFinancialInformationEntityInternal.decode(result[2]! as List<Object?>),
      consentPurposeInfo: NativeConsentPurposeInfoInternal.decode(result[3]! as List<Object?>),
      consentDisplayDescriptions: (result[4] as List<Object?>?)!.cast<String?>(),
      dataDateTimeRange: NativeDateTimeRangeInternal.decode(result[5]! as List<Object?>),
      consentDateTimeRange: NativeDateTimeRangeInternal.decode(result[6]! as List<Object?>),
      consentDataFrequency: NativeConsentDataFrequencyInternal.decode(result[7]! as List<Object?>),
      consentDataLifePeriod: NativeConsentDataLifePeriodInternal.decode(result[8]! as List<Object?>),
      fiTypes: (result[9] as List<Object?>?)?.cast<String?>(),
      statusLastUpdateTimestamp: result[10] as String?,
    );
  }
}

class NativeSelfConsentRequestInternal {
  NativeSelfConsentRequestInternal({
    required this.createTime,
    required this.startTime,
    required this.expireTime,
    required this.linkedAccounts,
    required this.consentTypes,
    required this.consentFiTypes,
    required this.mode,
    required this.fetchType,
    required this.frequency,
    required this.dataLife,
    required this.purposeText,
    required this.purposeType,
  });

  String createTime;

  String startTime;

  String expireTime;

  List<NativeLinkedAccountDetailsInfoInternal?> linkedAccounts;

  List<String?> consentTypes;

  List<String?> consentFiTypes;

  String mode;

  String fetchType;

  NativeConsentDataFrequencyInternal frequency;

  NativeConsentDataLifePeriodInternal dataLife;

  String purposeText;

  String purposeType;

  Object encode() {
    return <Object?>[
      createTime,
      startTime,
      expireTime,
      linkedAccounts,
      consentTypes,
      consentFiTypes,
      mode,
      fetchType,
      frequency.encode(),
      dataLife.encode(),
      purposeText,
      purposeType,
    ];
  }

  static NativeSelfConsentRequestInternal decode(Object result) {
    result as List<Object?>;
    return NativeSelfConsentRequestInternal(
      createTime: result[0]! as String,
      startTime: result[1]! as String,
      expireTime: result[2]! as String,
      linkedAccounts: (result[3] as List<Object?>?)!.cast<NativeLinkedAccountDetailsInfoInternal?>(),
      consentTypes: (result[4] as List<Object?>?)!.cast<String?>(),
      consentFiTypes: (result[5] as List<Object?>?)!.cast<String?>(),
      mode: result[6]! as String,
      fetchType: result[7]! as String,
      frequency: NativeConsentDataFrequencyInternal.decode(result[8]! as List<Object?>),
      dataLife: NativeConsentDataLifePeriodInternal.decode(result[9]! as List<Object?>),
      purposeText: result[10]! as String,
      purposeType: result[11]! as String,
    );
  }
}

class NativeConsentHistoryInternal {
  NativeConsentHistoryInternal({
    required this.consentId,
    this.consentTimestamp,
  });

  String consentId;

  String? consentTimestamp;

  Object encode() {
    return <Object?>[
      consentId,
      consentTimestamp,
    ];
  }

  static NativeConsentHistoryInternal decode(Object result) {
    result as List<Object?>;
    return NativeConsentHistoryInternal(
      consentId: result[0]! as String,
      consentTimestamp: result[1] as String?,
    );
  }
}

class NativeAccountDataInternal {
  NativeAccountDataInternal({
    this.consentId,
    this.timestamp,
    this.sessionId,
    this.transactionId,
  });

  String? consentId;

  String? timestamp;

  String? sessionId;

  String? transactionId;

  Object encode() {
    return <Object?>[
      consentId,
      timestamp,
      sessionId,
      transactionId,
    ];
  }

  static NativeAccountDataInternal decode(Object result) {
    result as List<Object?>;
    return NativeAccountDataInternal(
      consentId: result[0] as String?,
      timestamp: result[1] as String?,
      sessionId: result[2] as String?,
      transactionId: result[3] as String?,
    );
  }
}

class NativeAccountDataFetchInternal {
  NativeAccountDataFetchInternal({
    required this.fipId,
    required this.decryptedInfo,
  });

  String fipId;

  List<NativeFIDecryptedDataInfoInternal?> decryptedInfo;

  Object encode() {
    return <Object?>[
      fipId,
      decryptedInfo,
    ];
  }

  static NativeAccountDataFetchInternal decode(Object result) {
    result as List<Object?>;
    return NativeAccountDataFetchInternal(
      fipId: result[0]! as String,
      decryptedInfo: (result[1] as List<Object?>?)!.cast<NativeFIDecryptedDataInfoInternal?>(),
    );
  }
}

class NativeFIDecryptedDataInfoInternal {
  NativeFIDecryptedDataInfoInternal({
    required this.linkReferenceNumber,
    this.accountReferenceNumber,
    required this.maskedAccountNumber,
    this.fiType,
    this.accountType,
    required this.decryptedData,
  });

  String linkReferenceNumber;

  String? accountReferenceNumber;

  String maskedAccountNumber;

  String? fiType;

  String? accountType;

  String decryptedData;

  Object encode() {
    return <Object?>[
      linkReferenceNumber,
      accountReferenceNumber,
      maskedAccountNumber,
      fiType,
      accountType,
      decryptedData,
    ];
  }

  static NativeFIDecryptedDataInfoInternal decode(Object result) {
    result as List<Object?>;
    return NativeFIDecryptedDataInfoInternal(
      linkReferenceNumber: result[0]! as String,
      accountReferenceNumber: result[1] as String?,
      maskedAccountNumber: result[2]! as String,
      fiType: result[3] as String?,
      accountType: result[4] as String?,
      decryptedData: result[5]! as String,
    );
  }
}

class NativeConsentHistoryResponseInternal {
  NativeConsentHistoryResponseInternal({
    this.consentHistory,
  });

  List<NativeConsentHistoryInternal?>? consentHistory;

  Object encode() {
    return <Object?>[
      consentHistory,
    ];
  }

  static NativeConsentHistoryResponseInternal decode(Object result) {
    result as List<Object?>;
    return NativeConsentHistoryResponseInternal(
      consentHistory: (result[0] as List<Object?>?)?.cast<NativeConsentHistoryInternal?>(),
    );
  }
}

class _NativeFinvuManagerInternalCodec extends StandardMessageCodec {
  const _NativeFinvuManagerInternalCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is NativeAccountAggregatorInternal) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is NativeAccountDataFetchInternal) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is NativeAccountDataInternal) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is NativeConsentAccountDetailsInternal) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is NativeConsentDataFrequencyInternal) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is NativeConsentDataLifePeriodInternal) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is NativeConsentHistoryInternal) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is NativeConsentHistoryResponseInternal) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is NativeConsentInfoDetailsInternal) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is NativeConsentPurposeInfoInternal) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is NativeConsentReportInternal) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is NativeConsentRequestDetailInfoInternal) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is NativeDateTimeRangeInternal) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is NativeDeviceBindingResponse) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is NativeFIDecryptedDataInfoInternal) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is NativeFetchOfflineMessageResponseInternal) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is NativeFinancialInformationEntityInternal) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is NativeFinancialInformationEntityInternal) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is NativeForgotHandleInternal) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else if (value is NativeLinkedAccountDetailsInfoInternal) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else if (value is NativeLoginResponse) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    } else if (value is NativeOfflineMessageInfoInternal) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    } else if (value is NativePendingConsentRequestsResponseInternal) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    } else if (value is NativeSelfConsentRequestInternal) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else if (value is NativeUserConsentInfoInternal) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    } else if (value is NativeUserConsentResponseInternal) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    } else if (value is NativeUserInfoInternal) {
      buffer.putUint8(154);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return NativeAccountAggregatorInternal.decode(readValue(buffer)!);
      case 129: 
        return NativeAccountDataFetchInternal.decode(readValue(buffer)!);
      case 130: 
        return NativeAccountDataInternal.decode(readValue(buffer)!);
      case 131: 
        return NativeConsentAccountDetailsInternal.decode(readValue(buffer)!);
      case 132: 
        return NativeConsentDataFrequencyInternal.decode(readValue(buffer)!);
      case 133: 
        return NativeConsentDataLifePeriodInternal.decode(readValue(buffer)!);
      case 134: 
        return NativeConsentHistoryInternal.decode(readValue(buffer)!);
      case 135: 
        return NativeConsentHistoryResponseInternal.decode(readValue(buffer)!);
      case 136: 
        return NativeConsentInfoDetailsInternal.decode(readValue(buffer)!);
      case 137: 
        return NativeConsentPurposeInfoInternal.decode(readValue(buffer)!);
      case 138: 
        return NativeConsentReportInternal.decode(readValue(buffer)!);
      case 139: 
        return NativeConsentRequestDetailInfoInternal.decode(readValue(buffer)!);
      case 140: 
        return NativeDateTimeRangeInternal.decode(readValue(buffer)!);
      case 141: 
        return NativeDeviceBindingResponse.decode(readValue(buffer)!);
      case 142: 
        return NativeFIDecryptedDataInfoInternal.decode(readValue(buffer)!);
      case 143: 
        return NativeFetchOfflineMessageResponseInternal.decode(readValue(buffer)!);
      case 144: 
        return NativeFinancialInformationEntityInternal.decode(readValue(buffer)!);
      case 145: 
        return NativeFinancialInformationEntityInternal.decode(readValue(buffer)!);
      case 146: 
        return NativeForgotHandleInternal.decode(readValue(buffer)!);
      case 147: 
        return NativeLinkedAccountDetailsInfoInternal.decode(readValue(buffer)!);
      case 148: 
        return NativeLoginResponse.decode(readValue(buffer)!);
      case 149: 
        return NativeOfflineMessageInfoInternal.decode(readValue(buffer)!);
      case 150: 
        return NativePendingConsentRequestsResponseInternal.decode(readValue(buffer)!);
      case 151: 
        return NativeSelfConsentRequestInternal.decode(readValue(buffer)!);
      case 152: 
        return NativeUserConsentInfoInternal.decode(readValue(buffer)!);
      case 153: 
        return NativeUserConsentResponseInternal.decode(readValue(buffer)!);
      case 154: 
        return NativeUserInfoInternal.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class NativeFinvuManagerInternal {
  /// Constructor for [NativeFinvuManagerInternal].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NativeFinvuManagerInternal({BinaryMessenger? binaryMessenger})
      : __pigeon_binaryMessenger = binaryMessenger;
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _NativeFinvuManagerInternalCodec();

  Future<NativeLoginResponse> loginWithUsernameAndPasscode(String username, String passcode, String? totp, String? deviceId) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.loginWithUsernameAndPasscode';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[username, passcode, totp, deviceId]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeLoginResponse?)!;
    }
  }

  Future<NativeDeviceBindingResponse> deviceBinding(String otpLessToken, String deviceId, String osType, String osVersion, String appId, String appVersion, String? simSerialNumber) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.deviceBinding';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[otpLessToken, deviceId, osType, osVersion, appId, appVersion, simSerialNumber]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeDeviceBindingResponse?)!;
    }
  }

  Future<void> initiateForgotPasscodeRequest(String username, String mobileNumber) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.initiateForgotPasscodeRequest';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[username, mobileNumber]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> verifyForgotPasscodeOTP(String username, String mobileNumber, String otp, String newPasscode) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.verifyForgotPasscodeOTP';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[username, mobileNumber, otp, newPasscode]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> initiateForgotHandleRequest(String mobileNumber) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.initiateForgotHandleRequest';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[mobileNumber]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<NativeForgotHandleInternal> verifyForgotHandleOTP(String otp) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.verifyForgotHandleOTP';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[otp]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeForgotHandleInternal?)!;
    }
  }

  Future<void> register(String username, String mobileNumber, String passcode) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.register';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[username, mobileNumber, passcode]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<NativeUserInfoInternal> fetchUserInfo() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.fetchUserInfo';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeUserInfoInternal?)!;
    }
  }

  Future<void> unlinkAccount(NativeLinkedAccountDetailsInfoInternal account) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.unlinkAccount';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[account]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<NativeUserConsentResponseInternal> getUserConsents() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.getUserConsents';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeUserConsentResponseInternal?)!;
    }
  }

  Future<NativeConsentInfoDetailsInternal> getUserConsentDetails(NativeUserConsentInfoInternal consent) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.getUserConsentDetails';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[consent]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeConsentInfoDetailsInternal?)!;
    }
  }

  Future<NativeFetchOfflineMessageResponseInternal> fetchOfflineMessages() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.fetchOfflineMessages';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeFetchOfflineMessageResponseInternal?)!;
    }
  }

  Future<void> closeFinvuAccount(String password) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.closeFinvuAccount';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[password]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> changePasscode(String currentPasscode, String newPasscode) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.changePasscode';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[currentPasscode, newPasscode]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<NativeConsentReportInternal> getUserConsentReport() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.getUserConsentReport';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeConsentReportInternal?)!;
    }
  }

  Future<NativePendingConsentRequestsResponseInternal> fetchPendingConsentRequests() async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.fetchPendingConsentRequests';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativePendingConsentRequestsResponseInternal?)!;
    }
  }

  Future<NativeConsentInfoDetailsInternal> getUserConsentDetailsForId(String consentId) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.getUserConsentDetailsForId';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[consentId]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeConsentInfoDetailsInternal?)!;
    }
  }

  Future<NativeConsentHistoryResponseInternal> getConsentHistory(String consentId) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.getConsentHistory';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[consentId]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeConsentHistoryResponseInternal?)!;
    }
  }

  Future<NativeAccountDataInternal> initiateAccountDataRequest(String from, String to, String consentId, String publicKeyExpiry) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.initiateAccountDataRequest';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[from, to, consentId, publicKeyExpiry]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeAccountDataInternal?)!;
    }
  }

  Future<void> requestSelfConsent(NativeSelfConsentRequestInternal request) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.requestSelfConsent';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[request]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<NativeAccountDataFetchInternal> fetchAccountData(String sessionId, String consentId) async {
    const String __pigeon_channelName = 'dev.flutter.pigeon.finvu_flutter_sdk_internal.NativeFinvuManagerInternal.fetchAccountData';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[sessionId, consentId]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as NativeAccountDataFetchInternal?)!;
    }
  }
}
